# Define a function to populate Kerride_table with all incidents from the database
    def populate_kerride_table(self,filter_text=None, is_closed=False,):
     
     self.root.Kerride_table.delete(*self.root.Kerride_table.get_children())
    
     all_incidents = KBACKEND.retrieve_all_incidents()
    
     if all_incidents:
        for incident in all_incidents: 
         incident_datetime_s = incident.get("Incident Date")
         # Split the datetime string at the space character to extract the date part
         date_part = incident_datetime_s.date()
         registration = incident.get("Registration")
         Customer=incident.get("Customer")
         I_no=incident.get("Incident No")
         Status=incident.get("Status")
         Cat=incident.get("Category")
         loc=incident.get("Location")
         Char=incident.get("Charge")
         location=incident.get("Locationn")
         Owner= incident.get("Owner")
         Next_Event_Datetime=incident.get("Next_Event_Date")
         
         if Next_Event_Datetime is not None:
          Next_Event_Date = Next_Event_Datetime.date()
          Next_Event_Time = Next_Event_Datetime.time()
         else:
          Next_Event_Date = None  # or a default value
          Next_Event_Time = None  # or a default value
        

         
          # If filter_text is provided and incident does not match the filter, skip it
         if (filter_text is None or any(filter_text.lower() in str(value).lower() for value in (date_part, registration, Customer, location, I_no, Cat, loc, Char, Status))) \
                and (not is_closed or Status == "X"):
         
            self.root.Kerride_table.insert("", "end", values=(incident_datetime_s,Customer,location,registration,I_no,Cat,loc,Char,Status,Owner,Next_Event_Date,Next_Event_Time ))
     else:
      print("No incidents found in the database.")
         
    
    # Define a function to handle filtering when Entry fields are updated
    def handle_filtering(self, event=None):
        # Get the text entered in the Entry field that triggered the event
     if event:
        # Get the text entered in the Entry field that triggered the event
      filter_text = event.widget.get()
     else:
        # If event is None, set filter_text to None
        filter_text = None

     # Get the state of the Checkbutton
     is_closed = self.is_closed.get()

     # Populate Kerride_table with filtered data
     self.populate_kerride_table(filter_text=filter_text, closed=is_closed)
     
    #def handle_checkbutton(self):
     # Get the state of the Checkbutton
     #is_closed = self.is_closed.get()

     # Populate Kerride_table with filtered data
     #self.populate_kerride_table(is_closed=is_closed)
    
