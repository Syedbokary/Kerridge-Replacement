import tkinter as tk
from tkinter import Menu, messagebox,Entry,Text
from tkinter import Frame, LabelFrame,Label,Checkbutton,Button,HORIZONTAL,VERTICAL,BOTTOM,RIGHT,X,Y,BOTH
from PIL import Image, ImageTk
from tkinter import ttk 
from tkcalendar import DateEntry
import KBACKEND


class KerridgeReplacement:
    def __init__(self, root):
        self.root = root
        self.root.title("Kerridge Replacement Application")
        self.root.geometry("800x600")


        # Add icons within a box
        self.add_icon_box()

        # Add a DataFrame below the icons
        self.add_data_frame()

        # Maintanence components for third page 
        #self.maintanence_components()
        
    #Creating the top 13 icons with images
    def add_icon_box(self):
        # Create a container (Frame) for the icons with a border
        icon_box = tk.Frame(self.root, relief=tk.RIDGE, borderwidth=3)
        icon_box.pack(side=tk.TOP, padx=8, pady=2, anchor="nw")  # Start from left corner

        # You can add icons below menus using PhotoImage or other methods.
        # For demonstration purposes, let's create 13 small image icons.
        image_paths = ["icon1.png", "icon2.png", "icon3.png", "icon4.png"]
    
        for ida, path in enumerate(image_paths, start=1):
            image = Image.open(path)
            image = image.resize((15, 15), Image.BILINEAR)  # Change to Image.LANCZOS if preferred
            photo = ImageTk.PhotoImage(image)
            icon_button = tk.Button(icon_box, image=photo, command=lambda index=ida: self.open_icon_window(index))
            icon_button.image = photo
            icon_button.pack(side=tk.LEFT, padx=5, pady=2)  # Reduce pady value

    #Creating all the dataframes for the first page 
    def add_data_frame(self):
        # Create a DataFrame below the icons
        dataframe = LabelFrame(self.root, bd=3, relief=tk.RIDGE,text="Filter forwards")
        dataframe.pack(side=tk.TOP, padx=8, pady=3, anchor="nw")  # Start from left corner
        dataframe.place(x=0, y=40, width=780, height=100) 

        #================Legend frame================================#

        Legendframe= LabelFrame(self.root, relief=tk.RIDGE, text="Legend")
        Legendframe.place(x=0,y=140,width=780,height=60)

        #=================Details Frame===============================#

        Detailsframe= LabelFrame(self.root, relief=tk.RIDGE,text="Details")
        Detailsframe.place(x=0,y=200,width=780,height=400)

       #===================Creating Lables and Text Fields=============================#
        
        lb1 = Label(dataframe, text="Registration", padx=10)
        lb1.grid(row=0, column=0)
        text1 = Entry(dataframe, width=18)
        text1.grid(row=0, column=1)

        lb2 = Label(dataframe, text="Customer", padx=10)
        lb2.grid(row=0, column=2)
        text2 = Entry(dataframe, width=30)
        text2.grid(row=0, column=3)
    
        lb3 = Label(dataframe, text="Owner", padx=5)
        lb3.grid(row=0, column=4)
        text3 = Entry(dataframe, width=13)
        text3.grid(row=0, column=5)

        lb4 = Label(dataframe, text="Creator", padx=5)
        lb4.grid(row=0, column=6)
        text4 = Entry(dataframe, width=13)
        text4.grid(row=0, column=7)

        # Incident Type
        lb5 = Label(dataframe, text="Incident Type", padx=5)
        lb5.grid(row=1, column=0)
        text5 = Entry(dataframe, width=18)
        text5.grid(row=1, column=1)

        # Incident date
        lb6 = Label(dataframe, text="Incident date", padx=5)
        lb6.grid(row=1, column=2)
        text6 = DateEntry(dataframe, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
        text6.grid(row=1, column=3)

        #status
        lb7=Label(dataframe,text="Status",padx=5)
        lb7.grid(row=1, column=4)
        text7= Entry(dataframe,width=13)
        text7.grid(row=1,column=5,padx=5,pady=5)
        

        #closed

        text11= Checkbutton(dataframe,width=2)
        text11.grid(row=1,column=6)
        lb7=Label(dataframe,text="Closed")
        lb7.grid(row=1, column=7,)

        #Locations

        lb8= Label(dataframe,text="Locations")
        lb8.grid(row=2,column=0)
        text12=Entry(dataframe,width=18)
        text12.grid(row=2,column=1)
        

        #Creating Buttons in the legend frame
        #OverdueButton
        btnoverdue=Button(Legendframe,text="Overdue",fg="White",bg="red",width=14,height=1,padx=2,pady=6)
        btnoverdue.grid(row=0,column=0)
        #halfhour Button
        bthalfhour=Button(Legendframe,text="1/2 Hour",fg="White",bg="Fuchsia",width=14,height=1,padx=2,pady=6)
        bthalfhour.grid(row=0,column=1)
        #Overonehour Button
        btnonehour=Button(Legendframe,text="1 Hour",fg="White",bg="Dark Green",width=14,height=1,padx=2,pady=6)
        btnonehour.grid(row=0,column=2)
        #overfourhours button
        btnfourhours=Button(Legendframe,text="4 Hours",fg="White",bg="Black",width=14,height=1,padx=2,pady=6)
        btnfourhours.grid(row=0,column=3)
        #Oneday Button
        btnOneday=Button(Legendframe,text="1 day",fg="White",width=14,bg="Green",height=1,padx=2,pady=6)
        btnOneday.grid(row=0,column=4)
        #Overoneday Button
        btnOverOneday=Button(Legendframe,text="Over 1 day",fg="White",bg="Blue",width=14,height=1,padx=2,pady=6)
        btnOverOneday.grid(row=0,column=5)
        #Closed Button
        btnClosed=Button(Legendframe,text="Closed",fg="White",bg="Dark Grey",width=14,height=1,padx=2,pady=6)
        btnClosed.grid(row=0,column=6)
        
        #==================================Table==================================================#
        #==================Scrollbar==================#
        scrollbar_x=ttk.Scrollbar(Detailsframe,orient= HORIZONTAL)
        scrollbar_y=ttk.Scrollbar(Detailsframe,orient=VERTICAL)
        self.root.Kerride_table= ttk.Treeview(Detailsframe,column=("Incident Date","Customer","Location",
                                         "Registration","Incident No", "Type", "Status","Owner","Due Date","Time"),xscrollcommand= scrollbar_y.set,yscrollcommand= scrollbar_x.set)
        scrollbar_x.pack(side=BOTTOM,fill=X)
        scrollbar_y.pack(side=RIGHT,fill=Y)

        scrollbar_x=ttk.Scrollbar(command=self.root.Kerride_table.xview)
        scrollbar_y=ttk.Scrollbar(command=self.root.Kerride_table.yview)

        self.root.Kerride_table.heading("Incident Date", text="Incident Date")
        self.root.Kerride_table.heading("Customer", text="Customer")
        self.root.Kerride_table.heading("Location", text="Location")
        self.root.Kerride_table.heading("Registration", text="Registration")
        self.root.Kerride_table.heading("Incident No", text="Incident no")
        self.root.Kerride_table.heading("Type", text="Type")
        self.root.Kerride_table.heading("Status", text="Status")
        self.root.Kerride_table.heading("Owner", text="Owner")
        self.root.Kerride_table.heading("Due Date", text="Due Date")
        self.root.Kerride_table.heading("Time", text="Time")

        self.root.Kerride_table["show"]="headings"
        self.root.Kerride_table.pack(fill=BOTH, expand=1)
        
        self.root.Kerride_table.column("Incident Date", width=90)
        self.root.Kerride_table.column("Customer", width=110)
        self.root.Kerride_table.column("Location", width=70)
        self.root.Kerride_table.column("Registration", width=90)
        self.root.Kerride_table.column("Incident No", width=70)
        self.root.Kerride_table.column("Type", width=60)
        self.root.Kerride_table.column("Status", width=70)
        self.root.Kerride_table.column("Owner", width=60)
        self.root.Kerride_table.column("Due Date", width=90)
        self.root.Kerride_table.column("Time", width=50)

        style = ttk.Style()
        style.theme_use("default")
        style.configure("Treeview", background="white", foreground="black", rowheight=25, fieldbackground="white")
        style.map("Treeview", background=[("selected", "lightblue")])
        style.layout("Treeview.Item", [('Treeitem.padding', {'sticky': 'nswe', 'children': [('Treeitem.indicator', {'side': 'left', 'sticky': ''}), ('Treeitem.image', {'side': 'left', 'sticky': ''}), ('Treeitem.text', {'side': 'left', 'sticky': 'we'})]})])
        style.configure("Treeview.Heading", background="lightgray", foreground="black", rowheight=25)

        # Add lines in between rows and columns
        style.layout("Treeview", [('Treeview.treearea', {'sticky': 'nswe'})])  # Remove the cell border
        style.layout("Treeview.Item", [('Treeitem.padding', {'sticky': 'nswe', 'children': [('Treeitem.label', {'sticky': 'nswe'})]})])  # Set padding for each cell
        style.layout("Treeview.Row", [])  # Remove row border
    

    #opening an another window from first page icons 
    def open_icon_window(self, index):
        if index == 2:
            self.open_registration_window()
        if index==3:
            self.open_Purchase_order()
        elif index == 1:
            self.close_the_window()
        # Add more conditions for other icons as needed
    
    #=======================Second page which is icon_2 window starts=====================#
    #Creating a registration window
    def open_registration_window(self):
     self.registration_window = tk.Toplevel(self.root)
     self.registration_window.title("Find Customer")
     self.registration_window.geometry("300x100")

    # Create label and entry field for registration number
     label = Label(self.registration_window, text="Enter Registration No:")
     label.grid(row=0, column=0)

     self.entry = Entry(self.registration_window)
     self.entry.grid(row=0, column=1)

        # Create buttons
     ok_button = Button(self.registration_window, text="OK", command= self.populate_registration)
     ok_button.grid(row=1, column=0)

     cancel_button = Button(self.registration_window, text="Cancel", command=self.registration_window.destroy)
     cancel_button.grid(row=1, column=1)
    
    #Making the entered registration number to populate in my registration number field in incident form
    def populate_registration(self):
        reg_no=self.entry.get()
        if reg_no:
         self.registration_window.destroy()  
         # Store the registration number into the database using the function from KBackend.py 
         KBACKEND.store_registration(reg_no) 
         # Open the self.icon1_window (Incident Detail Form) with the registration number
         self.open_icon1_window(reg_no)
        else:
          messagebox.showwarning("Warning","Please enter a registration number.")

    def open_icon1_window(self, reg_no):

     self.icon1_window= tk.Toplevel(self.root)
     self.icon1_window.title("Incident Detail Form")
     self.icon1_window.geometry("800x600")  # Adjust the width and height as needed
     

    #Create a container (Frame) for the icons with a border
     icon_box = tk.Frame(self.icon1_window, relief=tk.RIDGE, borderwidth=3)
     icon_box.pack(side=tk.TOP, padx=8, pady=2, anchor="nw")  # Start from left corner

    # You can add icons below menus using PhotoImage or other methods.
    # For demonstration purposes, let's create 13 small image icons.
     image_paths = ["icon14.png", "icon15.png", "icon16.png", "icon17.png"]
     for idb, path in enumerate(image_paths, start=1):
         image = Image.open(path)
         image = image.resize((15, 15), Image.BILINEAR)  # Change to Image.LANCZOS if preferred
         photo = ImageTk.PhotoImage(image)
         icon_button = tk.Button(icon_box, image=photo, command=lambda index=idb: self.open_icon_windowsecond(index))
         icon_button.image = photo
         icon_button.pack(side=tk.LEFT, padx=5, pady=2)
    
    
    # Create frames for each page
         self.main_page = Frame(self.icon1_window)
         self.events_page = Frame(self.icon1_window)
         self.misc_page = Frame(self.icon1_window)

    # Function to show main page
     def show_main_page():
        self.main_page.pack(fill="both", expand=True)
        self.events_page.pack_forget()

    # Function to show events page
     def show_events_page():
      self.main_page.pack_forget()
      self.events_page.pack(fill="both", expand=True)

    
     show_main_page()

      #Creating Buttons Frame for second pagE
     Buttonframe= Frame(self.icon1_window, relief=tk.RIDGE,)
     Buttonframe.place(x=0,y=27,width=780,height=40)

    # Create buttons
     main_button = tk.Button(Buttonframe, text="MAIN", command=show_main_page)
     main_button.pack(side=tk.LEFT, padx=1, pady=2)

     events_button = tk.Button(Buttonframe, text="EVENTS", command=show_events_page)
     events_button.pack(side=tk.LEFT, padx=1, pady=2)

    # Main page components
     #First Data Frame for Vehicle Details
     dataframe = LabelFrame(self.main_page, bd=3, relief=tk.RIDGE,text="Vehicle Details")
     dataframe.pack(side=tk.TOP, padx=8, pady=3, anchor="nw")  # Start from left corner
     dataframe.place(x=0, y=29, width=780, height=85) 

     # Assuming you have a list of registration numbers
     Reg_no = Label(dataframe, text="Registration No:")
     Reg_no.grid(row=0, column=0)

    # Create a Combobox widget and pass the list of registration numbers as options 
     text1 = Entry(dataframe,width=15)
     text1.insert(0, reg_no)
     text1.grid(row=0, column=1)
     
     #Creating an Entry for page 2
     text2 = Entry(dataframe, width=30)
     text2.grid(row=0, column=2,padx=70)
     
     #Creating a Label and Entry for Driver name:

     lb3 = Label(dataframe, text="Driver name:")
     lb3.grid(row=0, column=3)
     text3 = Entry(dataframe, width=18)
     text3.grid(row=0, column=4)

     #Creating a Label and Entry for Vehicle loaded:

     lb3 = Label(dataframe, text="Vehicle loaded:")
     lb3.grid(row=1, column=0,pady=10)
     Vehicle_loaded=Checkbutton(dataframe,width=2)
     Vehicle_loaded.grid(row=1,column=1)

     #Creating another Entry for page 2
     text2 = Entry(dataframe, width=30)
     text2.grid(row=1, column=2,padx=80)

     #Creating a Label and Entry for Driver Phone:

     lb3 = Label(dataframe, text="Phone:")
     lb3.grid(row=1, column=3)
     text3 = Entry(dataframe, width=18)
     text3.grid(row=1, column=4)
    
     #Second Data Frame for Customer and Company Details 
     Customer= LabelFrame(self.main_page, bd=3, relief=tk.RIDGE,text="Customer/Company Details")
     Customer.pack(side=tk.TOP, padx=8, pady=3, anchor="nw")  # Start from left corner
     Customer.place(x=0,y=115,width=780,height=100)

     #Creating Label for Name and entry as dropdown 
     Names= ["ABC123", "DEF456", "GHI789", "JKL012"]

     Name = Label(Customer, text="Name:", padx=10, pady=10)
     Name.grid(row=0, column=0)

     Nametext= ttk.Combobox(Customer, values=Names, width=30)
     Nametext.grid(row=0, column=1)

     #Creating Label and Entry for Customer phone
     Cusphone= Label(Customer,text="Phone:")
     Cusphone.grid(row=0,column=2,padx=10)
     cusphonentry = Entry(Customer, width=30)
     cusphonentry.grid(row=0, column=3,padx=20)

     #Creating Label and Entry for Depot
     Depot= Label(Customer,text="Depot:")
     Depot.grid(row=0,column=4,padx=10)
     Depotentry=Entry(Customer,width=18)
     Depotentry.grid(row=0,column=5,padx=10)

     #Creating Customer contact
     Contact = Label(Customer, text="Customer:", padx=10, pady=10)
     Contact.grid(row=1, column=0)
     Contactentry= Entry(Customer,width=30)
     Contactentry.grid(row=1,column=1)

     #Creating Label and Entry for fax
     fax= Label(Customer,text="fax:")
     fax.grid(row=1,column=2,padx=10)
     faxentry = Entry(Customer, width=30)
     faxentry.grid(row=1, column=3,padx=20)

     #Creating Label and Entry for Order no
     order_no= Label(Customer,text="Order no:")
     order_no.grid(row=1,column=4,padx=10)
     ordernoentry=Entry(Customer,width=18)
     ordernoentry.grid(row=1,column=5,padx=10)
     
     #Creating a frame for incident details 
      
     Incident_details= LabelFrame(self.main_page, bd=3, relief=tk.RIDGE,text="Incident Details")
     Incident_details.pack(side=tk.TOP, padx=8, pady=3, anchor="nw")  # Start from left corner
     Incident_details.place(x=0,y=220,width=780,height=250)

     #Creating a label and entry field for location
     Location= Label(Incident_details, text="Location:")
     Location.grid(row=0, column=0,pady=(0,25),sticky='w')
     locaentry= Text(Incident_details,width=50, height='3',wrap='word')
     locaentry.grid(row=0,column=1,sticky='w')

     #Creating a label and Entry for Number

     Number= Label(Incident_details,text="Number:")
     Number.grid(row=0,column=3,padx=5)
     Numberentry=Entry(Incident_details,width=15)
     Numberentry.grid(row=0,column=4)
     
     #Creating Label and Entry for Date
     Date = Label(Incident_details, text="Date", padx=5)
     Date.grid(row=1, column=3,padx=20,pady=4)
     datee= DateEntry(Incident_details, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     datee.grid(row=1, column=4,sticky='w')

     #Creating Label and Entry for Time 

     Time = Label(Incident_details, text="Time", padx=5)
     Time.grid(row=2, column=3)
     Time= Entry(Incident_details, width=10)
     Time.grid(row=2, column=4,sticky='w')


     #Creating Label and Entry for Odometer

     Odo= Label(Incident_details, text="Odometer", padx=5)
     Odo.grid(row=3, column=3)
     Odo= Entry(Incident_details, width=13)
     Odo.grid(row=3, column=4,sticky='w')

     #Creating Lable and Entry for Location:
     # Define the label
     Locations= ["014","015"]
     Loca = tk.Label(Incident_details, text="Location:", padx=5)
     Loca.grid(row=4, column=3)

    # Define locaentry
     locaentry = ttk.Combobox(Incident_details, values=Locations, width=5)
     locaentry.grid(row=4, column=4, sticky='w')

    # Define locaentryy
     locaentryy = tk.Entry(Incident_details, width=13)
     locaentryy.grid(row=4, column=5, sticky='w')


     #Creating a Lable and Entry for Type

     Types= ["ABC123", "DEF456", "GHI789", "JKL012"]

     Type= Label(Incident_details, text="Type:")
     Type.grid(row=1,column=0,padx=5,pady=6)
     TypeEntry= ttk.Combobox(Incident_details, values=Types, width=18)
     TypeEntry.grid(row=1, column=1, pady=6, sticky='w') 

     Typeentryy= Entry(Incident_details, width= 40)
     Typeentryy.grid(row=2,column=1,pady=4, sticky='w')

     #Creating a Label and Entry for Fault Description
     Fault= Label(Incident_details, text="Fault Desription:")
     Fault.grid(row=3, column=0, pady=(0,25),sticky='w')
     Faultentry= Text(Incident_details,width=50, height='3',wrap='word')
     Faultentry.grid(row=3,column=1,sticky='w')
     

     #Creating a Lable and Entry for Status

     Status= ["A","B","C","D"]

     Statuss= Label(Incident_details, text="Status:")
     Statuss.grid(row=4,column=0,padx=2)
     StatussEntry= ttk.Combobox(Incident_details, values=Status, width=3)
     StatussEntry.grid(row=4, column=1, padx=2, sticky='w')
     new_entry = Entry(Incident_details)
     new_entry.grid(row=5, column=1, padx=2,  sticky='w')

     #Creating Label and Entry for closed
     Closedlabel=Label(Incident_details,text="Closed")
     Closedlabel.grid(row=5, column=3)
     Closed= Checkbutton(Incident_details,width=2)
     Closed.grid(row=5,column=4,sticky='w')
     
    

    #Creating Frame for Supplier details
     Supplier_details=LabelFrame(self.main_page,bd=3,relief=tk.RIDGE,text="Supplier Details")
     Supplier_details.pack(side=tk.TOP,padx=8,pady=3, anchor="nw")
     Supplier_details.place(x=0,y=480,width=780,height=70)

     #Creating label and Entry for Name:
     
     Names= ["abcd","shhshs""hhsjjs"]
     Namesup= Label(Supplier_details, text="Name:")
     Namesup.grid(row=0,column=0,padx=5)
     nameentry= ttk.Combobox(Supplier_details,values=Names,width=30)
     nameentry.grid(row=0,column=1,padx=5)
     
      #Creating label and Entry for Contat:
     Contacts= ["abcd","shhshs""hhsjjs"]
     Contactsup= Label(Supplier_details, text="Contact:")
     Contactsup.grid(row=0,column=2,padx=5)
     Contactentry= ttk.Combobox(Supplier_details,values=Contacts,width=30)
     Contactentry.grid(row=0,column=3,padx=5)

     #Creating Label and Entry for phone 

     Phonesup= Label(Supplier_details, text="Phone:")
     Phonesup.grid(row=0,column=4,padx=5)
     Phoneentry= ttk.Entry(Supplier_details,width=30)
     Phoneentry.grid(row=0,column=5,padx=5)
     
     #Creating Label and Entry for fax
     faxsup= Label(Supplier_details, text="fax:")
     faxsup.grid(row=1,column=0,padx=5)
     faxentry= ttk.Entry(Supplier_details,width=25)
     faxentry.grid(row=1,column=1,padx=5)




    # Events page components
     EventsFrame= LabelFrame(self.events_page, relief=tk.RIDGE,text="Events")
     EventsFrame.place(x=0,y=30,width=780,height=500)
    
     
     self.events_tree = ttk.Treeview(EventsFrame, columns=("Created", "Time1", "By1", "Event Type", "Event Action", "Notes", "Last Updated", "Time2","By2", "Follow-Up", "Time3","By3", "Action"),show="headings")
     self.events_tree.pack(fill="both", expand=True)

     self.events_tree.heading("Created", text="Created")
     self.events_tree.heading("Time1", text="Time1")
     self.events_tree.heading("By1", text="By1")
     self.events_tree.heading("Event Type", text="Event Type")
     self.events_tree.heading("Event Action", text="Event Action")
     self.events_tree.heading("Notes", text="Notes")
     self.events_tree.heading("Last Updated", text="Last Updated")
     self.events_tree.heading("Time2", text="Time2")
     self.events_tree.heading("By2",text="By2")
     self.events_tree.heading("Follow-Up", text="Follow-Up")
     self.events_tree.heading("Time3", text="Time3")
     self.events_tree.heading("By3",text="By3")
     self.events_tree.heading("Action", text="Action")

     self.events_tree.column("Created", width=90)
     self.events_tree.column("Time1", width=70)
     self.events_tree.column("By1", width=60)
     self.events_tree.column("Event Type", width=80)
     self.events_tree.column("Event Action", width=80)
     self.events_tree.column("Notes", width=200)
     self.events_tree.column("Last Updated", width=90)
     self.events_tree.column("Time2", width=70)
     self.events_tree.column("By2",width=60)
     self.events_tree.column("Follow-Up", width= 70)
     self.events_tree.column("Time3",width= 70)
     self.events_tree.column("By3",width= 60)
     self.events_tree.column("Action",width= 70)

     # Simulate adding some data to the tree
     for i in range(10):
      self.events_tree.insert("", "end", values=[f"Item {i}"] * 13)

    
     #Simulate adding some data to the tree
     self.scrollbar_y = ttk.Scrollbar(EventsFrame, orient="vertical", command=self.events_tree.yview)
     self.scrollbar_y.pack(side="right", fill="y")
     self.events_tree.configure(yscrollcommand=self.scrollbar_y.set)

     self.scrollbar_x = ttk.Scrollbar(EventsFrame, orient="horizontal", command=self.events_tree.xview)
     self.scrollbar_x.pack(side="bottom", fill="x")
     self.events_tree.configure(xscrollcommand=self.scrollbar_x.set)
     
     
    #Creating Event list for the third icon
    def create_event_list(self):
     self.icon3_window= tk.Toplevel(self.root)
     self.icon3_window.title("Event Detail Form")
     self.icon3_window.geometry("800x600") 

     Incident_Event= Frame(self.icon3_window, bd=3, relief=tk.RIDGE)
     Incident_Event.pack(side=tk.TOP, padx=8, pady=3, anchor="nw")  # Start from left corner
     Incident_Event.place(x=0,y=30,width=600,height=100)
     
     #Creating Label and Entry for Event Type, Action required inside Incident Event frame
     Event_types= ["abcd","shhshs""hhsjjs"]
     Event_type= Label(Incident_Event, text="Event type:")
     Event_type.grid(row=0,column=0,padx=5,pady=5)
     Event_type_entry= ttk.Combobox(Incident_Event,values=Event_types,width=20)
     Event_type_entry.grid(row=0,column=1,sticky="w",padx=5,pady=5)
     Event_another_entry= Entry(Incident_Event,width=50)
     Event_another_entry.grid(row=0,column=2,sticky="w")

     Actions= ["abcd","shhshs""hhsjjs"]
     Action_required= Label(Incident_Event, text="Action required:")
     Action_required.grid(row=1,column=0,padx=5,pady=5)
     Action_required_entry= ttk.Combobox(Incident_Event,values=Actions,width=20)
     Action_required_entry.grid(row=1,column=1,sticky="w",padx=5,pady=5)
     Action_required_another_entry= Entry(Incident_Event,width=50)
     Action_required_another_entry.grid(row=1,column=2,sticky="w")

     Created= LabelFrame(self.icon3_window,bd=3, relief=tk.RIDGE,text="Created")
     Created.pack(side=tk.TOP, padx=8, pady=3, anchor="w")
     Created.place(x=610,y=30,width=180,height=120)
     #Creating Date, Time and ID INSIDE THE CREATED DATAFRAME
     Date_created = Label(Created, text="Date:")
     Date_created.grid(row=0, column=0,padx=5,pady=4)
     Date_created_Entry= DateEntry(Created, width=12, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     Date_created_Entry.grid(row=0, column=1,sticky='w')
     #Time
     Time_created= Label(Created,text="Time:")
     Time_created.grid(row=1,column=0)
     Time_created_entry= Entry(Created,width=9)
     Time_created_entry.grid(row=1,column=1,sticky="w")
     #id
     ID= Label(Created,text="ID:")
     ID.grid(row=2,column=0)
     ID_entry= Entry(Created,width=15)
     ID_entry.grid(row=2,column=1,sticky="w")


     Event_text=Frame(self.icon3_window,bd=3,relief=tk.RIDGE)
     Event_text.pack(side=tk.TOP, padx=8, pady=3, anchor="w")
     Event_text.place(x=0,y=130,width=600,height=200)
     #Creating a label and entry field for Event text inside Event text frame 
     Event_details= Label(Event_text, text="Event_text:")
     Event_details.grid(row=0, column=0,sticky='w')
     Event_details_entry= Text(Event_text,width=50, height='10',wrap='word')
     Event_details_entry.grid(row=0,column=1,sticky='w',padx=5,pady=5)



     Last_amended= LabelFrame(self.icon3_window,bd=3, relief=tk.RIDGE,text="Last Amended")
     Last_amended.pack(side=tk.TOP, padx=8, pady=3, anchor="w")
     Last_amended.place(x=610,y=150,width=180,height=120)
     #Creating Date, Time and ID INSIDE THE Last Amended DATAFRAME
     Date_amended = Label(Last_amended, text="Date:")
     Date_amended.grid(row=0, column=0,padx=5,pady=4)
     Date_amended_Entry= DateEntry(Last_amended, width=12, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     Date_amended_Entry.grid(row=0, column=1,sticky='w')
     #Time
     Time_amended= Label(Last_amended,text="Time:")
     Time_amended.grid(row=1,column=0)
     Time_amended_entry= Entry(Last_amended,width=9)
     Time_amended_entry.grid(row=1,column=1,sticky="w")
     #id
     IDlast= Label(Last_amended,text="ID:")
     IDlast.grid(row=2,column=0)
     ID_last_entry= Entry(Last_amended,width=15)
     ID_last_entry.grid(row=2,column=1,sticky="w")


     Next_event= LabelFrame(self.icon3_window,bd=3,relief=tk.RIDGE,text="Next Event")
     Next_event.pack(side=tk.TOP, padx=8,pady=3,anchor="w")
     Next_event.place(x=40, y=330, width=500,height= 180)
     #Creating Date, Time and ID,Type INSIDE THE Next Event Dataframe
     Date_nextevent = Label(Next_event, text="Date:")
     Date_nextevent.grid(row=0, column=0,padx=5,pady=4)
     Date_nextevent_Entry= DateEntry(Next_event, width=12, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     Date_nextevent_Entry.grid(row=0, column=1,sticky='w')
     #Time
     Time_nextevent= Label(Next_event,text="Time:")
     Time_nextevent.grid(row=1,column=0,padx=5,pady=5)
     Time_nextevent_entry= Entry(Next_event,width=9)
     Time_nextevent_entry.grid(row=1,column=1,sticky="w",padx=5,pady=5)
     #id
     ids= ["abcd","shhshs""hhsjjs"]
     id_nextevent= Label(Next_event, text="ID:")
     id_nextevent.grid(row=2,column=0,padx=5,pady=5)
     id_nextevent_entry= ttk.Combobox(Next_event,values=ids,width=20)
     id_nextevent_entry.grid(row=2,column=1,sticky="w",padx=5,pady=5)
     id_another_entry= Entry(Next_event,width=40)
     id_another_entry.grid(row=2,column=2,sticky="w")

     Typess= ["abcd","shhshs""hhsjjs"]
     Type_nextevent= Label(Next_event, text="Type:")
     Type_nextevent.grid(row=3,column=0,padx=5,pady=5)
     Type_nextevent_entry= ttk.Combobox(Next_event,values=Typess,width=20)
     Type_nextevent_entry.grid(row=3,column=1,sticky="w",padx=5,pady=5)
     Type_another_entry= Entry(Next_event,width=40)
     Type_another_entry.grid(row=3,column=2,sticky="w")

     #defining functionalities for icons in the event details page 
     icon_box = tk.Frame(self.icon3_window, relief=tk.RIDGE, borderwidth=3)
     icon_box.pack(side=tk.TOP, padx=8, pady=2, anchor="nw")  # Start from left corner

    # You can add icons below menus using PhotoImage or other methods.
    # For demonstration purposes, let's create 13 small image icons.
     images = ["icon 21.png", "icon 22.png"]
     for idd, path in enumerate(images, start=1):
         image = Image.open(path)
         image = image.resize((15, 15), Image.BILINEAR)  # Change to Image.LANCZOS if preferred
         photo = ImageTk.PhotoImage(image)
         icon_button = tk.Button(icon_box, image=photo, command=lambda index=idd: self.event_functionality(index))
         icon_button.image = photo
         icon_button.pack(side=tk.LEFT, padx=5, pady=2)

    def event_functionality(self,index):
        if index == 1:
            self.exit()
        elif index == 2:
            self.save()
    def exit(self):
         self.icon3_window.destroy()
    def save(self):
        pass
        
        


    #defining functionalities for the icons in the second page 
    def open_icon_windowsecond(self,index):
        if index == 2:
            self.open_next_window()
        elif index == 1:
            self.close_the_second_window()
        elif index==3:
            self.create_event_list() 
    
    def open_next_window(self):
        pass
    def close_the_second_window(self):
        self.icon1_window.destroy()



#==================================End of Second page except closing the window command================#
    
# Starting the third page which is the Purchase order form 
    def open_Purchase_order(self):
     self.purchase_order= tk.Toplevel(self.root)
     self.purchase_order.title("Maintainence Control")
     self.purchase_order.geometry("800x600")  # Adjust the width and height as needed

     icon_box = tk.Frame(self.purchase_order, relief=tk.RIDGE, borderwidth=3)
     icon_box.pack(side=tk.TOP, padx=8, pady=2, anchor="nw")  # Start from left corner

   
     image_paths = ["icon 18.png", "icon 19.png"]
     for idc, path in enumerate(image_paths, start=1):
         image = Image.open(path)
         image = image.resize((15, 15), Image.BILINEAR)  # Change to Image.LANCZOS if preferred
         photo = ImageTk.PhotoImage(image)
         icon_button = tk.Button(icon_box, image=photo, command=lambda index=idc: self.open_icon_windowthird(index))
         icon_button.image = photo
         icon_button.pack(side=tk.LEFT, padx=5, pady=2)
     
     # Create frames for each page
         self.Maintenance_Control = Frame(self.purchase_order)
         self.History = Frame(self.purchase_order)

    # Function to show main page
     def show_maintainence():
        self.Maintenance_Control.pack(fill="both", expand=True)
        self.History.pack_forget()

    # Function to show events page
     def show_History():
      self.Maintenance_Control.pack_forget()
      self.History.pack(fill="both", expand=True)

     show_maintainence()

      #Creating Buttons Frame for second pagE
     Buttonframe= Frame(self.purchase_order, relief=tk.RIDGE)
     Buttonframe.place(x=0,y=27,width=780,height=40)

    # Create buttons
     maintain_button = tk.Button(Buttonframe, text="Maintenance Control", command=show_maintainence)
     maintain_button.pack(side=tk.LEFT, padx=1, pady=2)

     hist_button = tk.Button(Buttonframe, text="History", command=show_History)
     hist_button.pack(side=tk.LEFT, padx=1, pady=2)
     
     #Defining the maintainence components in the third page 
  
     Maindataframe= Frame(self.Maintenance_Control,bd=3, relief=tk.RIDGE)
     Maindataframe.pack(side=tk.TOP,padx=8,pady=3, anchor='nw')
     Maindataframe.place(x=0,y=29,width=780,height=85)

     #Creating Label and Entry for Reg no 
     Reg_no= Label(Maindataframe,text="Reg_no:")
     Reg_no.grid(row=0,column=0)
     Reg_no_entry = Entry(Maindataframe, width=30)
     Reg_no_entry.grid(row=0, column=1)

     #Creating Label and Entry for Vehicle 
     Vehicle_main= Label(Maindataframe,text= "Vehicle:")
     Vehicle_main.grid(row=0,column=2)
     Vehicle_main_entry= Entry(Maindataframe,width=35)
     Vehicle_main_entry.grid(row=0,column=3,sticky='w')

     #Creating Label and Entry for Next Scheduled event
     NextSchevent= Label(Maindataframe,text= "Next sched event:")
     NextSchevent.grid(row=0,column=4)
     NextSchevententry= Entry(Maindataframe,width=20)
     NextSchevententry.grid(row=0,column=5,sticky='w')

     #Creating Label and Entry for Reg date
     Reg_Date = Label(Maindataframe, text="Reg Date:")
     Reg_Date.grid(row=1, column=0,padx=5,pady=4)
     Reg_Date_Entry= DateEntry(Maindataframe, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     Reg_Date_Entry.grid(row=1, column=1,sticky='w')

     #Creating Label and Entry for RFL 
     RFL = Label(Maindataframe, text="RFL:")
     RFL.grid(row=1, column=2,padx=5,pady=4)
     RFL_Entry= DateEntry(Maindataframe, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     RFL_Entry.grid(row=1, column=3,sticky='w')

     #Creating Label and Entry for MOT
     MOT = Label(Maindataframe, text="MOT:")
     MOT.grid(row=1, column=4,padx=5,pady=4)
     MOT_entry= DateEntry(Maindataframe, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     MOT_entry.grid(row=1, column=5,sticky='w')

     #Creating Label and Entry for Last Serviced
     LastServiced = Label(Maindataframe, text="Last Serviced:")
     LastServiced.grid(row=2, column=0)
     LastServicedentry= DateEntry(Maindataframe, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     LastServicedentry.grid(row=2, column=1,sticky='w')

     #Creating Label and Entry for at:
     NextSchevent= Label(Maindataframe,text= "at :")
     NextSchevent.grid(row=2,column=2)
     NextSchevententry= Entry(Maindataframe,width=10)
     NextSchevententry.grid(row=2,column=3,sticky='w')

     #Creating a new dataframe below Main dataframe

     Agreementframe= Frame(self.Maintenance_Control,bd=3, relief=tk.RIDGE)
     Agreementframe.pack(side=tk.TOP,padx=8,pady=3, anchor='nw')
     Agreementframe.place(x=0,y=120,width=780,height=40)

     #Create Label and entry for Agreement inside the dataframe
     
     Agreement= Label(Agreementframe,text="Agreement:")
     Agreement.grid(row=0,column=0,padx=5,pady=5)
     Agreemententry= Entry(Agreementframe,width=30)
     Agreemententry.grid(row=0,column=1,padx=5,pady=5)

     #Create Label and entry for Customer
     Customer= Label(Agreementframe,text="Customer:")
     Customer.grid(row=0,column=2,padx=5,pady=5)
     Customerentry= Entry(Agreementframe,width=50)
     Customerentry.grid(row=0, column=3, padx=5, pady=5)

     #Creating a new dataframe below Agreement 

     self.Approvalframe= Frame(self.Maintenance_Control,bd=3, relief=tk.RIDGE)
     self.Approvalframe.pack(side=tk.TOP,padx=8,pady=3, anchor='nw')
     self.Approvalframe.place(x=0,y=170,width=780,height=180)
     
     #Creating frame for the 3 buttons 
     self.Approval_Issue = Frame(self.Approvalframe)
     self.Invoice_Details = Frame(self.Approvalframe)
     self.Miscc= Frame(self.Approvalframe)

     # Function to show approval page
     def show_Approval():
        self.Approval_Issue.pack(fill="both", expand=True)
        self.Invoice_Details.pack_forget()
        self.Miscc.pack_forget()

    # Function to show approval page
     def show_Invoice_Details():
      self.Maintenance_Control.pack_forget()
      self.Invoice_Details.pack(fill="both", expand=True)
      self.Miscc.pack_forget()
    
    #Function to show Misc Page 
     def show_Miscc():
      self.Maintenance_Control.pack_forget()
      self.Invoice_Details.pack_forget()
      self.Miscc.pack(fill="both",expand=True)
     
     show_Approval()

      #Creating Buttons Frame for second pagE
     Buttonframe= Frame(self.Approvalframe, relief=tk.RIDGE)
     Buttonframe.place(x=0,y=8,width=780,height=30)

    # Create buttons
     Approval_button = tk.Button(Buttonframe, text="Approval Issue", command=show_Approval)
     Approval_button.pack(side=tk.LEFT, padx=1, pady=2)

     Invoice_details_button = tk.Button(Buttonframe, text="Invoice Details", command=show_Invoice_Details)
     Invoice_details_button.pack(side=tk.LEFT, padx=1, pady=2)

     Miscc_button = tk.Button(Buttonframe, text="Misc", command=show_Miscc)
     Miscc_button.pack(side=tk.LEFT, padx=1, pady=2)
     
     #Inserting Label and entries inside the Approval button
     
     #Creating a dataframe inside the approval button
     Repairerdataframe= Frame(self.Approval_Issue,bd=3,relief=tk.RIDGE)
     Repairerdataframe.pack(side=tk.TOP,padx=8,pady=3,anchor='nw')
     Repairerdataframe.place(x=0,y=40,width=765,height=130)
     
     #Creating a label and combobox entry for Repairer 
     Repairernames= ["abcd","shhshs""hhsjjs"]
     Repairer= Label(Repairerdataframe, text="Repairer:")
     Repairer.grid(row=0,column=0,padx=5,pady=5)
     Repairerentry= ttk.Combobox(Repairerdataframe,values=Repairernames,width=20)
     Repairerentry.grid(row=0,column=1,sticky="w",padx=5,pady=5)

      
     #Creating a label and combobox entry for Account
     Accountnumbers= ["AB5677","MO908""HJ666"]
     Account= Label(Repairerdataframe, text="Account:")
     Account.grid(row=0,column=2,padx=5,pady=5)
     Accountentry= ttk.Combobox(Repairerdataframe,values=Accountnumbers,width=20)
     Accountentry.grid(row=0,column=3,sticky="w",padx=5,pady=5)

     #Creating a Label and Entry for Suplier
     Supplierr= Label(Repairerdataframe, text="Supplier:")
     Supplierr.grid(row=0,column=4,padx=5,pady=4)
     Supplierrentry= Entry(Repairerdataframe, width=41)
     Supplierrentry.grid(row=0,column=5,sticky="w",padx=5,pady=3)

     #Creating a Label and Entry for Approval
     Approval= Label(Repairerdataframe,text="Approval:")
     Approval.grid(row=1,column=0,padx=5,pady=5)
     Approvalentry= Entry(Repairerdataframe,width= 20)
     Approvalentry.grid(row=1,column=1,padx=5,pady=5,sticky="w")

     #Creating a Label and Entry for Issued:
     Issued = Label(Repairerdataframe, text="Issued:")
     Issued.grid(row=1, column=2,padx=5,pady=5)
     Issuedentry= DateEntry(Repairerdataframe, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     Issuedentry.grid(row=1, column=3,padx=5,pady=5,sticky='w')

     #Creating a Label and Entry for Odometer
     Odometer= Label(Repairerdataframe,text="Odometer:")
     Odometer.grid(row=2,column=0,padx=5,pady=5)
     Odometerentry= Entry(Repairerdataframe,width= 20)
     Odometerentry.grid(row=2,column=1,padx=5,pady=5,sticky="w")

     #Creating a Label and Entry for Repaired:
     Repaired = Label(Repairerdataframe, text="Repaired:")
     Repaired.grid(row=2, column=2,padx=5,pady=5)
     Repairedentry= DateEntry(Repairerdataframe, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     Repairedentry.grid(row=2, column=3,padx=5,pady=5,sticky='w')


     #Creating Table below the Approval Dataframe

     Table= Frame(self.Maintenance_Control, bd=3,relief=tk.RIDGE)
     Table.place(x=0,y=350,width=780,height=200)

     self.Table_tree = ttk.Treeview(Table, columns=("Reason", "Qty", "Value", "VAT Value", "Total", "Session", "Repair Description", "Rech Value"),show="headings")
     self.Table_tree.pack(fill="both", expand=True)

     self.Table_tree.heading("Reason", text="Reason")
     self.Table_tree.heading("Qty", text="Qty")
     self.Table_tree.heading("Value", text="Value")
     self.Table_tree.heading("VAT Value", text="VAT Value")
     self.Table_tree.heading("Total",text="Total")
     self.Table_tree.heading("Session", text="Session")
     self.Table_tree.heading("Repair Description", text="Repair Description")
     self.Table_tree.heading("Rech Value", text="Rech Value")
    
     self.Table_tree.column("Reason", width=60)
     self.Table_tree.column("Qty", width=60)
     self.Table_tree.column("Value", width=60)
     self.Table_tree.column("VAT Value", width=60)
     self.Table_tree.column("Total", width=60)
     self.Table_tree.column("Session", width=60)
     self.Table_tree.column("Repair Description", width=200)
     self.Table_tree.column("Rech Value", width=60)
     












     
         



    

    # Giving the functionalities for the icons such as exit and save 
    def open_icon_windowthird(self,index):
        if index == 1:
            self.close_the_third_window()
        elif index == 2:
            self.save_the_details()   
        
    def close_the_third_window(self):
        self.purchase_order.destroy()  
    def save_the_details():
        pass



    #This closes the first window and exits the application.
    def close_the_window(self):
        if messagebox.askokcancel("Quit", "Do you want to quit?"):
          self.root.destroy()
    

    
        


    

       

        


if __name__ == "__main__":
    root = tk.Tk()
    app = KerridgeReplacement(root)
    root.mainloop()


