import tkinter as tk
from tkinter import LEFT, messagebox,Entry,Text
from tkinter import Frame, LabelFrame,Label,Checkbutton,Button,HORIZONTAL,VERTICAL,BOTTOM,RIGHT,X,Y,BOTH
from PIL import Image, ImageTk
from tkinter import ttk 
from tkcalendar import DateEntry
from getpass import getuser
import datetime
import KBACKEND


    
class KerridgeReplacement:
    def __init__(self, root):
        self.root = root
        self.root.title("Kerridge Replacement Application")
        self.root.geometry("800x600")
        
        
        # Initialize your UI
         
        # Add icons within a box
        self.add_icon_box()

        # Add a DataFrame below the icons
        self.add_data_frame()

        self.undo_stack = []
        
        self.incieve=False
        self.incieveone=False
         
       
    #Creating the top 13 icons with images
    def add_icon_box(self):
        # Create a container (Frame) for the icons with a border
        icon_box = tk.Frame(self.root, relief=tk.RIDGE, borderwidth=3)
        icon_box.pack(side=tk.TOP, padx=8, pady=2, anchor="nw")  # Start from left corner

        # You can add icons below menus using PhotoImage or other methods.
        # For demonstration purposes, let's create 13 small image icons.
        image_paths = ["icon1.png", "icon2.png", "icon3.png", "icon4.png"]
    
        for ida, path in enumerate(image_paths, start=1):
            image = Image.open(path)
            image = image.resize((15, 15), Image.BILINEAR)  # Change to Image.LANCZOS if preferred
            photo = ImageTk.PhotoImage(image)
            icon_button = tk.Button(icon_box, image=photo, command=lambda index=ida: self.open_icon_window(index))
            icon_button.image = photo
            icon_button.pack(side=tk.LEFT, padx=5, pady=2)  # Reduce pady value
    
        
    #Creating all the dataframes for the first page 
    def add_data_frame(self):
        # Create a DataFrame below the icons
        dataframe = LabelFrame(self.root, bd=3, relief=tk.RIDGE,text="Filter forwards")
        dataframe.pack(side=tk.TOP, padx=8, pady=3, anchor="nw")  # Start from left corner
        dataframe.place(x=0, y=40, width=780, height=100) 

        #================Legend frame================================#

        Legendframe= LabelFrame(self.root, relief=tk.RIDGE, text="Legend")
        Legendframe.place(x=0,y=140,width=780,height=60)

        #=================Details Frame===============================#

        Detailsframe= LabelFrame(self.root, relief=tk.RIDGE,text="Details")
        Detailsframe.place(x=0,y=200,width=780,height=400)

       #===================Creating Lables and Text Fields=============================#
        
        lb1 = Label(dataframe, text="Registration", padx=10)
        lb1.grid(row=0, column=0)
        self.Regtext1 = Entry(dataframe, width=18)
        self.Regtext1.grid(row=0, column=1)
        self.attach_context_menu(self.Regtext1)

        lb2 = Label(dataframe, text="Customer", padx=10)
        lb2.grid(row=0, column=2)
        self.text2 = Entry(dataframe, width=25)
        self.text2.grid(row=0, column=3)
        self.attach_context_menu(self.text2)
    
        lb3 = Label(dataframe, text="Owner", padx=5)
        lb3.grid(row=0, column=4)
        self.text3 = Entry(dataframe, width=13)
        self.text3.grid(row=0, column=5)
        self.attach_context_menu(self.text3)

        lb4 = Label(dataframe, text="Creator", padx=5)
        lb4.grid(row=0, column=6)
        self.text4 = Entry(dataframe, width=13)
        self.text4.grid(row=0, column=7)
        self.attach_context_menu(self.text4)

        # Incident Type-Cat
        catdetails=KBACKEND.fetch_cat_details()
        self.catdetails= [row[0] for row in catdetails]
        lb5 = Label(dataframe, text="Defect_Cat", padx=5,pady=5)
        lb5.grid(row=1, column=0)
        self.text5 = ttk.Combobox(dataframe, values= self.catdetails, width=13)
        self.text5.grid(row=1, column=1)
        self.attach_context_menu(self.text5)
        
        #Incident Type- Loc
        locationdetails= KBACKEND.fetch_Location_details()
        self.locationdetails= [row[0] for row in locationdetails]
        locationlabel= Label(dataframe,text="I_Location", padx=5)
        locationlabel.grid(row=1,column=2)
        self.I_location=ttk.Combobox(dataframe,values=self.locationdetails,width=13)
        self.I_location.grid(row=1,column=3)
        self.attach_context_menu(self.I_location)

        #Incident Type- Charge
        Chargedetails=KBACKEND.fetch_charge_details()
        self.chargedetails=[row[0] for row in Chargedetails]
        chargelabel=Label(dataframe,text="Charge",padx=5)
        chargelabel.grid(row=1,column=4)
        self.I_charge=ttk.Combobox(dataframe,values=self.chargedetails,width=13)
        self.I_charge.grid(row=1,column=5)
        self.attach_context_menu(self.I_charge)
        # Incident date
        lb6 = Label(dataframe, text="Incident date", padx=5)
        lb6.grid(row=1, column=6)
        self.text6 = DateEntry(dataframe, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='yyyy-mm-dd')
        self.text6.grid(row=1, column=7)
        #self.text6.set_date(None)
        self.text6.delete(0, "end")
        self.attach_context_menu(self.text6)

        #status
        self.Statusdetails= KBACKEND.fetch_status_details()
        self.stats= [row[0] for row in self.Statusdetails]
        lb7=Label(dataframe,text="Status",padx=5)
        lb7.grid(row=2, column=0)
        self.text7= ttk.Combobox(dataframe,values=self.stats,width=13)
        self.text7.grid(row=2,column=1,padx=5,pady=5)
        self.attach_context_menu(self.text7)
        

        #closed
        self.is_closed= tk.BooleanVar()
        self.text11= Checkbutton(dataframe,variable=self.is_closed,width=2,command=self.filter_kerride_table)
        self.text11.grid(row=2,column=2)
        self.lb8=Label(dataframe,text="Closed")
        self.lb8.grid(row=2, column=3)
        self.attach_context_menu(self.text11)

        #Locations

        lb8= Label(dataframe,text="Locations")
        lb8.grid(row=2,column=4)
        self.text12=Entry(dataframe,width=18)
        self.text12.grid(row=2,column=5)
        self.attach_context_menu(self.text12)
        
        
        self.attach_events()

        
        self.clear_button = Button(dataframe, text="Clear All",width=10,command=self.clear_filters)
        self.clear_button.grid(row=2, column=7)


        #Creating Buttons in the legend frame
        #OverdueButton
        btnoverdue=Button(Legendframe,text="Overdue",fg="White",bg="red",width=14,height=1,padx=2,pady=6)
        btnoverdue.grid(row=0,column=0)
        #halfhour Button
        bthalfhour=Button(Legendframe,text="1/2 Hour",fg="White",bg="Fuchsia",width=14,height=1,padx=2,pady=6)
        bthalfhour.grid(row=0,column=1)
        #Overonehour Button
        btnonehour=Button(Legendframe,text="1 Hour",fg="White",bg="Dark Green",width=14,height=1,padx=2,pady=6)
        btnonehour.grid(row=0,column=2)
        #overfourhours button
        btnfourhours=Button(Legendframe,text="4 Hours",fg="White",bg="Black",width=14,height=1,padx=2,pady=6)
        btnfourhours.grid(row=0,column=3)
        #Oneday Button
        btnOneday=Button(Legendframe,text="1 day",fg="White",width=14,bg="Green",height=1,padx=2,pady=6)
        btnOneday.grid(row=0,column=4)
        #Overoneday Button
        btnOverOneday=Button(Legendframe,text="Over 1 day",fg="White",bg="Blue",width=14,height=1,padx=2,pady=6)
        btnOverOneday.grid(row=0,column=5)
        #Closed Button
        btnClosed=Button(Legendframe,text="Closed",fg="White",bg="Dark Grey",width=14,height=1,padx=2,pady=6)
        btnClosed.grid(row=0,column=6)
        
        #==================================Table==================================================#
        #==================Scrollbar==================#
        
        # Create the scrollbars
       # Create the scrollbars
        scrollbar_x = ttk.Scrollbar(Detailsframe, orient=HORIZONTAL)
        scrollbar_y = ttk.Scrollbar(Detailsframe, orient=VERTICAL)

        # Create the Treeview widget
        self.root.Kerride_table = ttk.Treeview(Detailsframe, column=("Incident Date", "Customer", "Location",
                                                            "Registration", "Incident No", "Cat", "Loca", 
                                                            "Char", "Status", "Owner", "Due Date", "Time"),
                                       xscrollcommand=scrollbar_x.set, yscrollcommand=scrollbar_y.set,selectmode="browse")

        # Configure the Treeview widget to use the scrollbar commands
        self.root.Kerride_table.configure(xscrollcommand=scrollbar_x.set, yscrollcommand=scrollbar_y.set)

        # Attach the scrollbar commands to the scrollbar widgets
        scrollbar_x.config(command=self.root.Kerride_table.xview)
        scrollbar_y.config(command=self.root.Kerride_table.yview)

        # Set column headings
        self.root.Kerride_table.heading("Incident Date", text="Incident Date")
        self.root.Kerride_table.heading("Customer", text="Customer")
        self.root.Kerride_table.heading("Location", text="Location")
        self.root.Kerride_table.heading("Registration", text="Registration")
        self.root.Kerride_table.heading("Incident No", text="Incident no")
        self.root.Kerride_table.heading("Cat", text="Cat")
        self.root.Kerride_table.heading("Loca", text="Loca")
        self.root.Kerride_table.heading("Char", text="Char")
        self.root.Kerride_table.heading("Status", text="Status")
        self.root.Kerride_table.heading("Owner", text="Owner")
        self.root.Kerride_table.heading("Due Date", text="Due Date")
        self.root.Kerride_table.heading("Time", text="Time")

        # Set Treeview to display column headings only
        self.root.Kerride_table["show"] = "headings"

        # Set column widths
        self.root.Kerride_table.column("Incident Date", width=90)
        self.root.Kerride_table.column("Customer", width=110)
        self.root.Kerride_table.column("Location", width=70)
        self.root.Kerride_table.column("Registration", width=70)
        self.root.Kerride_table.column("Incident No", width=63)
        self.root.Kerride_table.column("Cat", width=38)
        self.root.Kerride_table.column("Loca", width=38)
        self.root.Kerride_table.column("Char", width=38)
        self.root.Kerride_table.column("Status", width=45)
        self.root.Kerride_table.column("Owner", width=60)
        self.root.Kerride_table.column("Due Date", width=85)
        self.root.Kerride_table.column("Time", width=60)
        
        # Pack the scrollbars
        scrollbar_y.pack(side=RIGHT, fill=Y)
        scrollbar_x.pack(side=BOTTOM, fill=X)
        # Pack the Treeview widget
        self.root.Kerride_table.pack(side=LEFT, fill=BOTH, expand=True)

        # Bind the function to the Treeview widget after table creation
        self.root.Kerride_table.bind("<ButtonRelease-1>", self.change_row_color)

    
        self.populate_kerride_table()
    

    def attach_events(self):
        self.Regtext1.bind("<KeyRelease>", self.filter_kerride_table)
        self.text2.bind("<KeyRelease>", self.filter_kerride_table)
        self.text3.bind("<KeyRelease>", self.filter_kerride_table)
        self.text4.bind("<KeyRelease>", self.filter_kerride_table)
        self.text5.bind("<<ComboboxSelected>>", self.filter_kerride_table)
        self.I_location.bind("<<ComboboxSelected>>", self.filter_kerride_table)
        self.I_charge.bind("<<ComboboxSelected>>", self.filter_kerride_table)
        self.text6.bind("<<DateEntrySelected>>", self.filter_kerride_table)
        self.text7.bind("<<ComboboxSelected>>", self.filter_kerride_table)
        self.text12.bind("<KeyRelease>", self.filter_kerride_table)
    

    #opening an another window from first page icons 
    def open_icon_window(self, index):
        if index == 2:
            self.open_registration_window()
        if index==3:
            self.open_Purchase_order()
        elif index == 1:
            self.close_the_window()
        # Add more conditions for other icons as needed
    
    #=======================Second page which is icon_2 window starts=====================#
    #Creating a registration window
    def open_registration_window(self):
     self.registration_window = tk.Toplevel(self.root)
     self.registration_window.title("Find Customer")
     self.registration_window.geometry("300x100")

    # Create label and entry field for registration number
     label = Label(self.registration_window, text="Enter Registration No:")
     label.grid(row=0, column=0)

     self.entry = Entry(self.registration_window)
     self.entry.grid(row=0, column=1)

        # Create buttons
     ok_button = Button(self.registration_window, text="OK", command= self.populate_registration)
     ok_button.grid(row=1, column=0)

     cancel_button = Button(self.registration_window, text="Cancel", command=self.registration_window.destroy)
     cancel_button.grid(row=1, column=1)
    
    #Making the entered registration number to populate in my registration number field in incident form
    def populate_registration(self):
        reg_no=self.entry.get()
        if reg_no:
         result = KBACKEND.fetch_details_from_database(reg_no)
        if result:
            self.registration_window.destroy()
            self.open_icon1_window(reg_no)  
        # Populate Entry widgets with fetched details
            self.text1.delete(0, tk.END)
            self.text2.delete(0,tk.END)
            self.Fleet_entry.delete(0, tk.END)
            self.Customer_Identry.delete(0, tk.END)
            self.Cust_Name_Entry.delete(0, tk.END)
            self.Contract_No_Entry.delete(0, tk.END)
            self.location_1.delete(0, tk.END)
            self.Depotentry.delete(0, tk.END)

            self.text1.insert(0, reg_no)
            self.Fleet_entry.insert(0, result[1])
            self.text2.insert(0,result[2])
            self.Customer_Identry.insert(0, result[4])
            self.Cust_Name_Entry.insert(0,result[5]) 
            self.Contract_No_Entry.insert(0,result[3])
            self.location_1.insert(0,result[6])
            self.populate_location_description()
            self.Depotentry.insert(0,result[7])

        else:
            messagebox.showwarning("Warning", "Invalid registration number.")
        #else:
            #messagebox.showwarning("Warning", "Please enter a registration number.")

    
    def open_icon1_window(self, reg_no):

     self.icon1_window= tk.Toplevel(self.root)
     self.icon1_window.title("Incident Detail Form")
     self.icon1_window.geometry("800x620")  # Adjust the width and height as needed
     

    #Create a container (Frame) for the icons with a border
     icon_box = tk.Frame(self.icon1_window, relief=tk.RIDGE, borderwidth=3)
     icon_box.pack(side=tk.TOP, padx=8, pady=2, anchor="nw")  # Start from left corner

    # You can add icons below menus using PhotoImage or other methods.
    # For demonstration purposes, let's create 13 small image icons.
     image_paths = ["icon14.png", "icon15.png", "icon16.png", "icon17.png"]
     for idb, path in enumerate(image_paths, start=1):
         image = Image.open(path)
         image = image.resize((15, 15), Image.BILINEAR)  # Change to Image.LANCZOS if preferred
         photo = ImageTk.PhotoImage(image)
         icon_button = tk.Button(icon_box, image=photo, command=lambda index=idb: self.open_icon_windowsecond(index))
         icon_button.image = photo
         icon_button.pack(side=tk.LEFT, padx=5, pady=2)
    
    
    # Create frames for each page
         self.main_page = Frame(self.icon1_window)
         self.events_page = Frame(self.icon1_window)
         self.misc_page = Frame(self.icon1_window)

    # Function to show main page
     def show_main_page():
        self.main_page.pack(fill="both", expand=True)
        self.events_page.pack_forget()

    # Function to show events page
     def show_events_page():
      self.main_page.pack_forget()
      self.events_page.pack(fill="both", expand=True)
      self.open_next_window()
    
     show_main_page()

      #Creating Buttons Frame for second pagE
     Buttonframe= Frame(self.icon1_window, relief=tk.RIDGE,)
     Buttonframe.place(x=0,y=27,width=780,height=40)

    # Create buttons
     main_button = tk.Button(Buttonframe, text="MAIN", command=show_main_page)
     main_button.pack(side=tk.LEFT, padx=1, pady=2)

     events_button = tk.Button(Buttonframe, text="EVENTS", command=show_events_page)
     events_button.pack(side=tk.LEFT, padx=1, pady=2)

    # Main page components
     #First Data Frame for Vehicle Details
     dataframe = LabelFrame(self.main_page, bd=3, relief=tk.RIDGE,text="Vehicle Details")
     dataframe.pack(side=tk.TOP, padx=8, pady=3, anchor="nw")  # Start from left corner
     dataframe.place(x=0, y=29, width=780, height=100) 

     # Assuming you have a list of registration numbers
     Reg_no = Label(dataframe, text="Registration No:")
     Reg_no.grid(row=0, column=0)

    # Create a Combobox widget and pass the list of registration numbers as options 
     self.text1 = Entry(dataframe,width=15)
     self.text1.insert(0, reg_no)
     self.text1.grid(row=0, column=1)
     self.attach_context_menu(self.text1)
     
     #Creating an Entry for page 2
     self.text2 = Entry(dataframe, width=30)
     self.text2.grid(row=0, column=2,padx=70)
     self.attach_context_menu(self.text2)
     
     #Creating a Label and Entry for Driver name:

     lb3 = Label(dataframe, text="Driver name:")
     lb3.grid(row=0, column=3)
     self.Driverentry = Entry(dataframe, width=18)
     self.Driverentry.grid(row=0, column=4)
     self.attach_context_menu(self.Driverentry)

     #Creating a Label and Entry for Fleet No:
     Fleet_No=Label(dataframe, text="Fleet No:")
     Fleet_No.grid(row=1, column=0,pady=6)
     self.Fleet_entry=Entry(dataframe,width=15)
     self.Fleet_entry.grid(row=1,column=1)
     self.attach_context_menu(self.Fleet_entry)

     #Creating a Label and Entry for Vehicle loaded:

     lb3 = Label(dataframe, text="Vehicle loaded:")
     lb3.grid(row=2, column=0)
     Vehicle_loaded=Checkbutton(dataframe,width=2)
     Vehicle_loaded.grid(row=2,column=1)
     

     #Creating another Entry for page 2
     text2 = Entry(dataframe, width=30)
     text2.grid(row=1, column=2,padx=80)
     
     #Creating a Label and Entry for Driver Phone:

     lb3 = Label(dataframe, text="Phone:")
     lb3.grid(row=1, column=3)
     self.Driverphone = Entry(dataframe, width=18)
     self.Driverphone.grid(row=1, column=4)
     self.attach_context_menu(self.Driverphone)
    
     #Second Data Frame for Customer and Company Details 
     Customer= LabelFrame(self.main_page, bd=3, relief=tk.RIDGE,text="Customer/Company Details")
     Customer.pack(side=tk.TOP, padx=8, pady=3, anchor="nw")  # Start from left corner
     Customer.place(x=0,y=130,width=780,height=100)

     #Creating Label for ID and entry
     Customer_Id = Label(Customer, text="Customer_ID:", padx=3, pady=3)
     Customer_Id.grid(row=0, column=0)
     self.Customer_Identry= Entry(Customer, width=16)
     self.Customer_Identry.grid(row=0, column=1)
     self.attach_context_menu(self.Customer_Identry)

     #Creating Label for Cust_Name and entry
     Cust_Name = Label(Customer, text="Name:", padx=3, pady=3)
     Cust_Name.grid(row=0, column=2)
     self.Cust_Name_Entry= Entry(Customer, width=16)
     self.Cust_Name_Entry.grid(row=0, column=3)
     self.attach_context_menu(self.Cust_Name_Entry)   
     #Creating Label for Contract_No and Entry
     
     Contract_No = Label(Customer, text="Contract_No:", padx=3, pady=3)
     Contract_No.grid(row=0, column=4)
     self.Contract_No_Entry= Entry(Customer, width=16)
     self.Contract_No_Entry.grid(row=0, column=5)
     self.attach_context_menu(self.Contract_No_Entry)
     
      #Creating Label for Contact_Tel and Entry

     Contact_Tel = Label(Customer, text="Contact_Tel:", padx=3, pady=3)
     Contact_Tel.grid(row=0, column=6)
     self.Contact_Tel_Entry= Entry(Customer, width=16)
     self.Contact_Tel_Entry.grid(row=0, column=7)
     self.attach_context_menu(self.Contact_Tel_Entry)

    #Creating Label for Contact_Email and Entry

     Contact_Email = Label(Customer, text="Contact_Email:", padx=3, pady=3)
     Contact_Email.grid(row=1, column=0)
     self.Contact_Email_Entry= Entry(Customer, width=16)
     self.Contact_Email_Entry.grid(row=1, column=1)
     self.attach_context_menu(self.Contact_Email_Entry)

      #Creating Label for Contact_Email and Entry

     Contact_Name_Label=Label(Customer, text="Contact_Name:", padx=3, pady=3)
     Contact_Name_Label.grid(row=1, column=2)
     self.Contact_Name_Entry= Entry(Customer, width=16)
     self.Contact_Name_Entry.grid(row=1, column=3)
     self.attach_context_menu(self.Contact_Name_Entry)

     #Creating Label for Customer_Defect_No and Entry

     Customer_DefNO=Label(Customer, text="Cust_Def_No:", padx=3, pady=3)
     Customer_DefNO.grid(row=1, column=4)
     self.Customer_defno_Entry= Entry(Customer, width=16)
     self.Customer_defno_Entry.grid(row=1, column=5)
     self.attach_context_menu(self.Customer_defno_Entry)

      #Creating Label for Order_No and Entry

     Order_No=Label(Customer, text="Order No:", padx=3, pady=3)
     Order_No.grid(row=1, column=6)
     self.Order_No_Entry= Entry(Customer, width=16)
     self.Order_No_Entry.grid(row=1, column=7)
     self.attach_context_menu(self.Order_No_Entry)

     #Creating Label for Contact_Method_ID AND Entry
     self.contactmeth= KBACKEND.fetch_contact_detais()
     self.contactdetails= [row[1] for row in self.contactmeth]
     Contact_Method_Id=Label(Customer,text="Contact_Method_ID",padx=3,pady=3)
     Contact_Method_Id.grid(row=2,column=0)
     self.Contact_Method_Entry=ttk.Combobox(Customer,width=14,values=self.contactdetails)
     self.Contact_Method_Entry.grid(row=2,column=1)
     self.attach_context_menu(self.Contact_Method_Entry)

     #Creating Label for Depot
     Depot=Label(Customer,text="Depot",padx=3,pady=3)
     Depot.grid(row=2,column=2)
     self.Depotentry=Entry(Customer,width=16)
     self.Depotentry.grid(row=2,column=3)
     self.attach_context_menu(self.Depotentry)

     #Creating a frame for incident details 
      
     Incident_details= LabelFrame(self.main_page, bd=3, relief=tk.RIDGE,text="Incident Details")
     Incident_details.pack(side=tk.TOP, padx=8, pady=3, anchor="nw")  # Start from left corner
     Incident_details.place(x=0,y=230,width=780,height=293)

     #Creating a label and entry field for location
     Location= Label(Incident_details, text="Location:")
     Location.grid(row=0, column=0,pady=(0,25),sticky='w')
     self.locaentry= Text(Incident_details,width=40, height='3',wrap='word')
     self.locaentry.grid(row=0,column=1,columnspan=2,sticky='w')
     self.attach_context_menu(self.locaentry)

     #Creating a label and Entry for Number

     Number= Label(Incident_details,text="Number:")
     Number.grid(row=0,column=3,padx=5)
     self.Numberentry=Entry(Incident_details,width=15)
     gen_number=KBACKEND.generate_new_i_number()
     self.Numberentry.insert(0, gen_number)
     self.Numberentry.grid(row=0,column=4)
     self.attach_context_menu(self.Numberentry)
     
     #Creating Label and Entry for Date
     Date = Label(Incident_details, text="Date", padx=5)
     Date.grid(row=1, column=3,padx=20,pady=4)
     self.datee= DateEntry(Incident_details, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     self.datee.grid(row=1, column=4,sticky='w')
     self.attach_context_menu(self.datee)

     #Creating Label and Entry for Time 
     current_user=getuser()
     Created_by = Label(Incident_details, text="Created_By", padx=5)
     Created_by.grid(row=2, column=3)
     self.Time= Entry(Incident_details, width=10)
     self.Time.grid(row=2, column=4,sticky='w')
     self.Time.insert(0,current_user)
     self.attach_context_menu(self.Time)


     #Creating Label and Entry for Odometer

     Odo= Label(Incident_details, text="Odometer", padx=5)
     Odo.grid(row=3, column=3)
     self.Odo= Entry(Incident_details, width=13)
     self.Odo.grid(row=3, column=4,sticky='w')
     self.attach_context_menu(self.Odo)

     #Creating Lable and Entry for Location:
     # Define the label
     Locations= ["014","015"]
     self.Loca = tk.Label(Incident_details, text="Location:", padx=5)
     self.Loca.grid(row=4, column=3)

    # Define locaentry
     # Fetch data from the database using backend function
     rows = KBACKEND.fetch_locations_and_descriptions()
     self.locations = [row[0] for row in rows]  # First column values for dropdown

        # Define loca label
     self.loca_label = tk.Label(Incident_details, text="Location:", padx=3)
     self.loca_label.grid(row=4, column=3)

        # Define loca combobox
     self.location_1 = ttk.Combobox(Incident_details, values=self.locations, width=15)
     self.location_1.grid(row=4, column=4, sticky='w')
     self.attach_context_menu(self.location_1)
     

        # Define loca entry
     self.location_2 = tk.Entry(Incident_details, width=15)
     self.location_2.grid(row=5, column=4, sticky='w', columnspan=4)
     self.attach_context_menu(self.location_2)

     self.location_1.bind("<<ComboboxSelected>>", self.populate_location_description)
     

     #Creating a Lable and Entry for Type

     self.Catdetails=KBACKEND.fetch_cat_details()
     self.catdesc=[row[1] for row in self.Catdetails]
     

     Type= Label(Incident_details, text="Type:")
     Type.grid(row=1,column=0,padx=5,pady=6)
     self.CatEntry= ttk.Combobox(Incident_details, values=self.catdesc, width=13)
     self.CatEntry.grid(row=1, column=1, pady=4, sticky='w')
     self.attach_context_menu(self.CatEntry)
     
     
     self.Locdetils=KBACKEND.fetch_Location_details()
     self.locdesc= [row[1] for row in self.Locdetils]
     self.LolEntry=ttk.Combobox(Incident_details,values=self.locdesc,width=13)
     self.LolEntry.grid(row=1,column=2,pady=4,sticky='w')
     self.attach_context_menu(self.LolEntry)

     self.Chardetails=KBACKEND.fetch_charge_details()
     self.chardesc=[row[1] for row in self.Chardetails]
     self.Chargeentry=ttk.Combobox(Incident_details,values=self.chardesc,width=13)
     self.Chargeentry.grid(row=2,column=1,pady=4,sticky='w')
     self.attach_context_menu(self.Chargeentry)

     #Creating a Label and Entry for Fault Description
     Fault= Label(Incident_details, text="Fault Desription:")
     Fault.grid(row=3, column=0, pady=(0,25),sticky='w')
     self.Faultentry= Text(Incident_details,width=40, height='3',wrap='word')
     self.Faultentry.grid(row=3,column=1,sticky='w')
     self.attach_context_menu(self.Faultentry)
     

     #Creating a Lable and Entry for Status
     self.statrows=KBACKEND.fetch_status_details()
     self.statusdescription= [row[1] for row in self.statrows]
     Statuss= Label(Incident_details, text="Status:")
     Statuss.grid(row=4,column=0,padx=2)
     self.StatussEntry= ttk.Combobox(Incident_details, values=self.statusdescription, width=10)
     self.StatussEntry.grid(row=4, column=1, padx=2,pady=4, sticky='w')
     self.attach_context_menu(self.StatussEntry)



     #Creating Label and Entry for closed
     Closedlabel=Label(Incident_details,text="Closed")
     Closedlabel.grid(row=7, column=3)
     self.closed_var = tk.BooleanVar()
     self.Closed = tk.Checkbutton(Incident_details, variable=self.closed_var)
     self.Closed.grid(row=7,column=4,sticky='w')

     #Creating Label and Entry for Attendance Deferred
     

     Attendance_Def= Label(Incident_details, text="Attendance_Deferred")
     Attendance_Def.grid(row=5,column=0)
     self.attendance_var=tk.BooleanVar()
     self.AttendanceEntry= ttk.Checkbutton(Incident_details, variable=self.attendance_var)
     self.AttendanceEntry.grid(row=5, column=1, sticky='w')
     
     Deff = Label(Incident_details, text='Deferred To')
     Deff.grid(row=6, column=0, padx=2, sticky='w')
     self.Deferred_To = DateEntry(Incident_details, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='yyyy/mm/dd')
     self.Deferred_To.grid(row=6, column=1, padx=2, sticky='w')
     self.attach_context_menu(self.Deferred_To)

     Deff_time=Label(Incident_details,text='Deferred To Time')
     Deff_time.grid(row=7,column=0,padx=2, sticky='w')
     self.Deferred_Time= Entry(Incident_details,width=15)
     self.Deferred_Time.grid(row=7,column=1,sticky='w')
     current_time = datetime.datetime.now().strftime("%H:%M")
     self.Deferred_Time.insert(0,current_time)
     self.attach_context_menu(self.Deferred_Time)

     whatwords = Label(Incident_details, text='Defect_loc_W3W')
     whatwords.grid(row=6, column=3 ,sticky='w')
     self.whatwordsentry = Entry(Incident_details, width=20)
     self.whatwordsentry.grid(row=6, column=4,sticky='w')  # Set columnspan to 2
     self.attach_context_menu(self.whatwordsentry)


   
    #Creating Frame for Supplier details
     Supplier_details=LabelFrame(self.main_page,bd=3,relief=tk.RIDGE,text="Supplier Details")
     Supplier_details.pack(side=tk.TOP,padx=8,pady=3, anchor="nw")
     Supplier_details.place(x=0,y=522,width=780,height=60)

     #Creating label and Entry for Name:
     sup=KBACKEND.fetch_supplier_details()
     self.supplier = [row[1] for row in sup]

     Namesup= Label(Supplier_details, text="Supplier No:")
     Namesup.grid(row=0,column=0,padx=5)
     self.nameentry= ttk.Entry(Supplier_details,width=30)
     self.nameentry.grid(row=0,column=1,padx=5)
     self.attach_context_menu(self.nameentry)
     
      #Creating label and Entry for Contat:
     Contactsup= Label(Supplier_details, text="Supplier Name:")
     Contactsup.grid(row=0,column=2,padx=5,pady=5)
     self.Contactentry= ttk.Combobox(Supplier_details,values=self.supplier,width=30)
     self.Contactentry.grid(row=0,column=3,padx=5,pady=5)
     self.attach_context_menu(self.Contactentry)
     self.Contactentry.bind("<<ComboboxSelected>>", self.populate_supplier_details)

     #Creating Label and Entry for phone 

     Phonesup= Label(Supplier_details, text="Phone:")
     Phonesup.grid(row=0,column=4,padx=5)
     self.Phoneentry= ttk.Entry(Supplier_details,width=20)
     self.Phoneentry.grid(row=0,column=5,padx=5)
     self.attach_context_menu(self.Phoneentry)
     
    # Events page components
     EventsFrame= LabelFrame(self.events_page, relief=tk.RIDGE,text="Events")
     EventsFrame.place(x=0,y=30,width=780,height=500)
    
     
     self.events_tree = ttk.Treeview(EventsFrame, columns=("Created", "Time1", "By1", "Event Type", "Event Action", "Notes", "Last Updated", "Time2","By2", "Follow-Up", "Time3","By3", "Action"),show="headings")
     self.events_tree.pack(fill="both", expand=True)

     self.events_tree.heading("Created", text="Created")
     self.events_tree.heading("Time1", text="Time1")
     self.events_tree.heading("By1", text="By1")
     self.events_tree.heading("Event Type", text="Event Type")
     self.events_tree.heading("Event Action", text="Event Action")
     self.events_tree.heading("Notes", text="Notes")
     self.events_tree.heading("Last Updated", text="Last Updated")
     self.events_tree.heading("Time2", text="Time2")
     self.events_tree.heading("By2",text="By2")
     self.events_tree.heading("Follow-Up", text="Follow-Up")
     self.events_tree.heading("Time3", text="Time3")
     self.events_tree.heading("By3",text="By3")
     self.events_tree.heading("Action", text="Action")

     self.events_tree.column("Created", width=90)
     self.events_tree.column("Time1", width=70)
     self.events_tree.column("By1", width=60)
     self.events_tree.column("Event Type", width=80)
     self.events_tree.column("Event Action", width=80)
     self.events_tree.column("Notes", width=200)
     self.events_tree.column("Last Updated", width=90)
     self.events_tree.column("Time2", width=70)
     self.events_tree.column("By2",width=60)
     self.events_tree.column("Follow-Up", width= 70)
     self.events_tree.column("Time3",width= 70)
     self.events_tree.column("By3",width= 60)
     self.events_tree.column("Action",width= 70)
     

     #Simulate adding some data to the tree
     self.scrollbar_y = ttk.Scrollbar(EventsFrame, orient="vertical", command=self.events_tree.yview)
     self.scrollbar_y.pack(side="right", fill="y")
     self.events_tree.configure(yscrollcommand=self.scrollbar_y.set)

     self.scrollbar_x = ttk.Scrollbar(EventsFrame, orient="horizontal", command=self.events_tree.xview)
     self.scrollbar_x.pack(side="bottom", fill="x")
     self.events_tree.configure(xscrollcommand=self.scrollbar_x.set)
     
     
    #Creating Event list for the third icon
    def create_event_list(self):
     self.icon3_window= tk.Toplevel(self.root)
     self.icon3_window.title("Event Detail Form")
     self.icon3_window.geometry("800x600") 

     Incident_Event= Frame(self.icon3_window, bd=3, relief=tk.RIDGE)
     Incident_Event.pack(side=tk.TOP, padx=8, pady=3, anchor="nw")  # Start from left corner
     Incident_Event.place(x=0,y=30,width=600,height=100)
     
     #Creating Label and Entry for Event Type, Action required inside Incident Event frame
     self.event_typesinfo= KBACKEND.fetch_event_types()
     self.eventtypedetails= [row[1] for row in self.event_typesinfo]
     Event_type= Label(Incident_Event, text="Event type:")
     Event_type.grid(row=0,column=0,padx=5,pady=5)
     self.Event_type_entry= ttk.Combobox(Incident_Event,values=self.eventtypedetails,width=20)
     self.Event_type_entry.grid(row=0,column=1,sticky="w",padx=5,pady=5)
     self.attach_context_menu(self.Event_type_entry)
     self.Event_another_entry= Entry(Incident_Event,width=50)
     self.Event_another_entry.grid(row=0,column=2,sticky="w")
     self.attach_context_menu(self.Event_another_entry)

     current_user=getuser()
     Action_required= Label(Incident_Event, text="Created By")
     Action_required.grid(row=1,column=0,padx=5,pady=5)
     self.Action_required_entry= ttk.Entry(Incident_Event,width=30)
     self.Action_required_entry.grid(row=1,column=1,sticky="w",padx=5,pady=5)
     self.Action_required_entry.insert(0, current_user)
     self.attach_context_menu(self.Action_required_entry)
     
     Owner= Label(Incident_Event, text="Owner")
     Owner.grid(row=2,column=0,padx=5,pady=5)
     self.Owner_entry= Entry(Incident_Event,width=30)
     self.Owner_entry.grid(row=2,column=1,sticky="w",padx=5,pady=5)
     self.Owner_entry.insert(0,current_user)
     self.attach_context_menu(self.Owner_entry)

     Created= LabelFrame(self.icon3_window,bd=3, relief=tk.RIDGE,text="Created")
     Created.pack(side=tk.TOP, padx=8, pady=3, anchor="w")
     Created.place(x=610,y=30,width=180,height=120)
     #Creating Date, Time and ID INSIDE THE CREATED DATAFRAME
     Date_created = Label(Created, text="Date:")
     Date_created.grid(row=0, column=0,padx=5,pady=4)
     self.Date_created_Entry= DateEntry(Created, width=12, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     self.Date_created_Entry.grid(row=0, column=1,sticky='w')
     self.attach_context_menu(self.Date_created_Entry)
     #Time
     Time_created= Label(Created,text="Time:")
     Time_created.grid(row=1,column=0)
     self.Time_created_entry= Entry(Created,width=9)
     current_time = datetime.datetime.now().strftime("%H:%M")
     self.Time_created_entry.grid(row=1,column=1,sticky="w")
     self.Time_created_entry.insert(0, current_time)
     self.attach_context_menu(self.Time_created_entry)
     #id
     ID= Label(Created,text="ID:")
     ID.grid(row=2,column=0)
     self.ID_entry= Entry(Created,width=15)
     self.ID_entry.grid(row=2,column=1,sticky="w")
     self.attach_context_menu(self.ID_entry)


     Event_text=Frame(self.icon3_window,bd=3,relief=tk.RIDGE)
     Event_text.pack(side=tk.TOP, padx=8, pady=3, anchor="w")
     Event_text.place(x=0,y=130,width=600,height=200)
     #Creating a label and entry field for Event text inside Event text frame 
     Event_details= Label(Event_text, text="Event_text:")
     Event_details.grid(row=0, column=0,sticky='w')
     self.Event_details_entry= Text(Event_text,width=50, height='10',wrap='word')
     self.Event_details_entry.grid(row=0,column=1,sticky='w',padx=5,pady=5)
     self.attach_context_menu(self.Event_details_entry)



     


     Next_event= LabelFrame(self.icon3_window,bd=3,relief=tk.RIDGE,text="Next Event")
     Next_event.pack(side=tk.TOP, padx=8,pady=3,anchor="w")
     Next_event.place(x=40, y=330, width=500,height= 180)
     #Creating Date, Time and ID,Type INSIDE THE Next Event Dataframe
     Date_nextevent = Label(Next_event, text="Date:")
     Date_nextevent.grid(row=0, column=0,padx=5,pady=4)
     self.Date_nextevent_Entry= DateEntry(Next_event, width=12, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     self.Date_nextevent_Entry.grid(row=0, column=1,sticky='w')
     self.attach_context_menu(self.Date_nextevent_Entry)
     #Time
     Time_nextevent= Label(Next_event,text="Time:")
     Time_nextevent.grid(row=1,column=0,padx=5,pady=5)
     self.Time_nextevent_entry= Entry(Next_event,width=9)
     self.Time_nextevent_entry.grid(row=1,column=1,sticky="w",padx=5,pady=5)
     self.attach_context_menu(self.Time_nextevent_entry)
     #id
     ids= ["abcd","shhshs""hhsjjs"]
     id_nextevent= Label(Next_event, text="ID:")
     id_nextevent.grid(row=2,column=0,padx=5,pady=5)
     self.id_nextevent_entry= ttk.Combobox(Next_event,values=ids,width=20)
     self.id_nextevent_entry.grid(row=2,column=1,sticky="w",padx=5,pady=5)
     self.attach_context_menu(self.id_nextevent_entry)
     self.id_another_entry= Entry(Next_event,width=40)
     self.id_another_entry.grid(row=2,column=2,sticky="w")
     self.attach_context_menu(self.id_another_entry)

     self.type=KBACKEND.fetch_event_types()
     self.typedetails= [row[1] for row in self.type]
     Type_nextevent= Label(Next_event, text="Type:")
     Type_nextevent.grid(row=3,column=0,padx=5,pady=5)
     self.Type_nextevent_entry= ttk.Combobox(Next_event,values=self.typedetails,width=20)
     self.Type_nextevent_entry.grid(row=3,column=1,sticky="w",padx=5,pady=5)
     self.attach_context_menu(self.Type_nextevent_entry)
     self.Event_type_entry.bind("<<ComboboxSelected>>", self.populate_next_event_details)
     self.populate_next_event_details()
     self.Type_another_entry= Entry(Next_event,width=40)
     self.Type_another_entry.grid(row=3,column=2,sticky="w")
     self.attach_context_menu(self.Type_another_entry)

     #defining functionalities for icons in the event details page 
     icon_box = tk.Frame(self.icon3_window, relief=tk.RIDGE, borderwidth=3)
     icon_box.pack(side=tk.TOP, padx=8, pady=2, anchor="nw")  # Start from left corner

    # You can add icons below menus using PhotoImage or other methods.
    # For demonstration purposes, let's create 13 small image icons.
     images = ["icon 21.png", "icon 22.png"]
     for idd, path in enumerate(images, start=1):
         image = Image.open(path)
         image = image.resize((15, 15), Image.BILINEAR)  # Change to Image.LANCZOS if preferred
         photo = ImageTk.PhotoImage(image)
         icon_button = tk.Button(icon_box, image=photo, command=lambda index=idd: self.event_functionality(index))
         icon_button.image = photo
         icon_button.pack(side=tk.LEFT, padx=5, pady=2)

    def event_functionality(self,index):
        if index == 1:
            self.exit()
        elif index == 2:
            self.save()
    def exit(self):
         self.icon3_window.destroy()

    def save(self):
        
        Incident_No= self.Numberentry.get()
        date_str = self.Date_created_Entry.get()  # Get date as string
        time_str = self.Time_created_entry.get()  # Get time as string

        # Combine date and time strings into a single datetime string
        datetime_str = f"{date_str} {time_str}"

        # Convert the datetime string to a datetime object
        datetime_obj = datetime.datetime.strptime(datetime_str, "%d/%m/%Y %H:%M")

        First_event=self.Event_type_entry.get()
        for row in self.event_typesinfo:    
         if row[1] == First_event:
            First_event_tostore = row[0]
            break
         
        Event_text=self.Event_details_entry.get("1.0", tk.END)
        second_event= self.Type_nextevent_entry.get()
        for row in self.type:    
         if row[1] == second_event:
            Second_event_tostore = row[0]
            break
        datee_str= self.Date_nextevent_Entry.get()
        timee_str=self.Time_nextevent_entry.get()
         # Combine date and time strings into a single datetime string
        datetime_strr = f"{datee_str} {timee_str}"
        # Convert the datetime string to a datetime object
        datetime_objj = datetime.datetime.strptime(datetime_strr, "%d/%m/%Y %H:%M")
        Created_by= self.Action_required_entry.get()
        Owner=self.Owner_entry.get()
        KBACKEND.store_event_details(Incident_No,datetime_obj,First_event_tostore,Event_text
                                     ,Second_event_tostore,datetime_objj,Created_by,Owner)
        getting_ino= KBACKEND.giving_i_no_to_events()
        if getting_ino:
           for incident_details in getting_ino:
              incident_no= incident_details.get("I_Number")
              if incident_no is not None:
               last_incievent= KBACKEND.retrievevents(incident_no)
               if last_incievent:
                for incidents in last_incievent:
                 print("Processing incident:", incidents)
       
                incident_date = incidents.get("Incident Date")
                Customer=incidents.get("Customer")
                registration = incidents.get("Registration")
                I_no=incidents.get("Incident No")
                Status=incidents.get("Status")
                Category=incidents.get("Category")
                loca=incidents.get("Location")
                Charg=incidents.get("Charge")
                Locat= incidents.get("Locationn")
                Owner=incidents.get("Owner")
                Next_Event_DT=incidents.get("Next_Event_DT")
                if Next_Event_DT is not None:
                 Next_Event_Date = Next_Event_DT.date()
                 Next_Event_Time = Next_Event_DT.time()
                else:
                 Next_Event_Date = None  # or a default value
                 Next_Event_Time = None
        # Insert the incident into Kerride_table
                 self.root.Kerride_table.insert("", "end", values=(incident_date, Customer, Locat, registration,I_no,Category,loca,Charg,Status,Owner,Next_Event_Date,Next_Event_Time))
        self.populate_kerride_table()
       
        
        
              
              
        event_details= KBACKEND.fetch_all_events(Incident_No)
        self.events_tree.delete(*self.events_tree.get_children())
        
       
        if event_details:
          for event in event_details:
             Event_created= event.get('Created')
             #event_datetime = datetime.strptime(Event_created, "%Y-%m-%d %H:%M:%S")
             Created_date = Event_created.date()

             # Get the time part
             Created_time = Event_created.time()
        
             Notes= event.get('Notes')
             Last_updated= event.get('Last Updated')
             #last_updated_datetime= datetime.strptime(Last_updated, "%Y-%m-%d %H:%M:%S")
             Last_updated_date= Last_updated.date()
             Last_updated_time= Last_updated.time()
             Follow_up= event.get('Follow up')
             #Follow_up_datetime= datetime.strptime(Follow_up, "%Y-%m-%d %H:%M:%S")
             Follow_up_date= Follow_up.date()
             follow_up_time= Follow_up.time()
             Event_Description= event.get('Event_Description')
             Next_Event_Description= event.get('Next_Event_Description')


             self.events_tree.insert("", "end", values=(Created_date,Created_time,"",Event_Description,"",
                Notes,Last_updated_date,Last_updated_time,"",Follow_up_date,follow_up_time,"",Next_Event_Description))
             
             self.events_tree.bind("<<TreeviewSelect>>", self.on_roww_selected)

    def on_roww_selected(self,event):
        selected_item = self.events_tree.selection()
        
        if selected_item:
         # Extract the index of the selected item
         item_index = self.events_tree.index(selected_item[0])

         # Event number is the index + 1 (since event numbers start from 1)
         event_no = item_index + 1

         # Get the incident number from the entry
         incident_no=self.Numberentry.get()

         fetch_event_detailsthree= KBACKEND.fetch_data_for_eventthree(incident_no,event_no)

         self.open_eventspagethree_with_clickedrow(fetch_event_detailsthree)        
        
    def open_eventspagethree_with_clickedrow(self,fetch_event_detailsthree):
     
     self.event_windows= tk.Toplevel(self.root)
     self.event_windows.title("Event Detail Form")
     self.event_windows.geometry("800x600") 

     Incident_Eventt= Frame(self.event_windows, bd=3, relief=tk.RIDGE)
     Incident_Eventt.pack(side=tk.TOP, padx=8, pady=3, anchor="nw")  # Start from left corner
     Incident_Eventt.place(x=0,y=30,width=600,height=100)

     self.eventsinfothree= KBACKEND.fetch_event_types()
     self.eventtypesinformationthree= [row[1] for row in self.eventsinfothree]
     Event_type= Label(Incident_Eventt, text="Event type:")
     Event_type.grid(row=0,column=0,padx=5,pady=5)
     self.Event_type_entryythree= ttk.Combobox(Incident_Eventt,values=self.eventtypesinformationthree,width=20)
     self.Event_type_entryythree.grid(row=0,column=1,sticky="w",padx=5,pady=5)
     self.Event_type_valuethree= fetch_event_detailsthree.get("Event_Type")
     self.Event_type_entryythree.set(self.Event_type_valuethree if self.Event_type_valuethree is not None else"")
     self.Event_type_entryythree.state(['disabled'])
     self.attach_context_menu(self.Event_type_entryythree)

     self.Event_another_entryythree= Entry(Incident_Eventt,width=50,state='disabled')
     self.Event_another_entryythree.grid(row=0,column=2,sticky="w")
     self.attach_context_menu(self.Event_another_entryythree)

     
     Action_required= Label(Incident_Eventt, text="Created By")
     Action_required.grid(row=1,column=0,padx=5,pady=5)
     self.Action_required_entryythree= ttk.Entry(Incident_Eventt,width=30)
     self.Action_required_entryythree.grid(row=1,column=1,sticky="w",padx=5,pady=5)
     self.Action_required_entryyvaluethree=fetch_event_detailsthree.get("Createdby")
     self.Action_required_entryythree.insert(0,self.Action_required_entryyvaluethree if self.Action_required_entryyvaluethree
                                        is not None else"")
     self.Action_required_entryythree.state(['disabled'])
     self.attach_context_menu(self.Action_required_entryythree)
     
     Owner= Label(Incident_Eventt, text="Owner")
     Owner.grid(row=2,column=0,padx=5,pady=5)
     self.Owner_entryythree= ttk.Entry(Incident_Eventt,width=30)
     self.Owner_entryythree.grid(row=2,column=1,sticky="w",padx=5,pady=5)
     self.Ownerentryyvaluethree= fetch_event_detailsthree.get("Owner")
     self.Owner_entryythree.insert(0,self.Ownerentryyvaluethree if self.Ownerentryyvaluethree is not None else"")
     self.Owner_entryythree.state(['disabled'])
     self.attach_context_menu(self.Owner_entryythree)

     Created= LabelFrame(self.event_windows,bd=3, relief=tk.RIDGE,text="Created")
     Created.pack(side=tk.TOP, padx=8, pady=3, anchor="w")
     Created.place(x=610,y=30,width=180,height=120)

     #Creating Date, Time and ID INSIDE THE CREATED DATAFRAME
     Date_created = Label(Created, text="Date:")
     Date_created.grid(row=0, column=0,padx=5,pady=4)
     self.Date_created_Entryythree= DateEntry(Created, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     self.Date_created_Entryythree.grid(row=0, column=1,sticky='w')
     self.Date_created_Entryyvaluethree= fetch_event_detailsthree.get("Createddate")
     self.Date_created_datethree= self.Date_created_Entryyvaluethree.date()
     self.Date_created_Entryythree.set_date(self.Date_created_datethree if self.Date_created_datethree is not None else"")
     self.Date_created_Entryythree.state(['disabled'])
     self.attach_context_menu(self.Date_created_Entryythree)
     #Time
     Time_created= Label(Created,text="Time:")
     Time_created.grid(row=1,column=0)
     self.Time_created_entryythree= ttk.Entry(Created,width=9)
     self.Time_created_entryythree.grid(row=1,column=1,sticky="w")
     self.Time_created_entryyvaluethree= fetch_event_detailsthree.get("Createddate")
     self.Time_created_timethree=self.Time_created_entryyvaluethree.time()
     self.Time_created_entryythree.insert(0,self.Time_created_timethree if self.Time_created_timethree is not None else"")
     self.Time_created_entryythree.state(['disabled'])
     self.attach_context_menu(self.Time_created_entryythree)
     #id
     ID= Label(Created,text="ID:")
     ID.grid(row=2,column=0)
     self.ID_entryythree= ttk.Entry(Created,width=15)
     self.ID_entryythree.grid(row=2,column=1,sticky="w")
     self.ID_entryythree['state'] = 'disabled'
     self.attach_context_menu(self.ID_entryythree)


     Event_text=Frame(self.event_windows,bd=3,relief=tk.RIDGE)
     Event_text.pack(side=tk.TOP, padx=8, pady=3, anchor="w")
     Event_text.place(x=0,y=130,width=600,height=200)
     #Creating a label and entry field for Event text inside Event text frame 
     Event_details= Label(Event_text, text="Event_text:")
     Event_details.grid(row=0, column=0,sticky='w')
     self.Event_details_entryythree= tk.Text(Event_text,width=50, height='10',wrap='word')
     self.Event_details_entryythree.grid(row=0,column=1,sticky='w',padx=5,pady=5)
     self.Event_detailsvaluethree= fetch_event_detailsthree.get("Eventtext")
     self.Event_details_entryythree.insert("1.0",self.Event_detailsvaluethree if self.Event_detailsvaluethree is not None else"")
     self.Event_details_entryythree['state'] = 'disabled'
     self.attach_context_menu(self.Event_details_entryythree)

     

     


     Next_event= LabelFrame(self.event_windows,bd=3,relief=tk.RIDGE,text="Next Event")
     Next_event.pack(side=tk.TOP, padx=8,pady=3,anchor="w")
     Next_event.place(x=40, y=330, width=500,height= 180)

     #Creating Date, Time and ID,Type INSIDE THE Next Event Dataframe
     Date_nextevent = Label(Next_event, text="Date:")
     Date_nextevent.grid(row=0, column=0,padx=5,pady=4)
     self.Date_nextevent_Entryythree= DateEntry(Next_event, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     self.Date_nextevent_Entryythree.grid(row=0, column=1,sticky='w')
     self.Date_nextevent_Entryyvaluethree=fetch_event_detailsthree.get("Nexteventdate")
     self.Date_nextevent_datethree= self.Date_nextevent_Entryyvaluethree.date()
     self.Date_nextevent_Entryythree.set_date(self.Date_nextevent_datethree if self.Date_nextevent_datethree is not None else"")
     self.Date_nextevent_Entryythree.state(['disabled'])
     self.attach_context_menu(self.Date_nextevent_Entryythree)
     #Time
     Time_nextevent= Label(Next_event,text="Time:")
     Time_nextevent.grid(row=1,column=0,padx=5,pady=5)
     self.Time_nextevent_entryythree= Entry(Next_event,width=9)
     self.Time_nextevent_entryythree.grid(row=1,column=1,sticky="w",padx=5,pady=5)
     self.Time_nextevent_entryyvaluethree= fetch_event_detailsthree.get("Nexteventdate")
     self.Time_nextevent_timethree= self.Time_nextevent_entryyvaluethree.time()
     self.Time_nextevent_entryythree.insert(0,self.Time_nextevent_timethree if self.Time_nextevent_timethree is not None else"")
     self.Time_nextevent_entryythree['state'] = 'disabled'
     self.attach_context_menu(self.Time_nextevent_entryythree)
     #id
     ids= ["abcd","shhshs""hhsjjs"]
     id_nextevent= Label(Next_event, text="ID:")
     id_nextevent.grid(row=2,column=0,padx=5,pady=5)
     self.id_nextevent_entryythree= ttk.Combobox(Next_event,values=ids,width=20)
     self.id_nextevent_entryythree.grid(row=2,column=1,sticky="w",padx=5,pady=5)
     self.id_nextevent_entryythree['state'] = 'disabled'
     self.attach_context_menu(self.id_nextevent_entryythree)
     self.id_another_entryythree= Entry(Next_event,width=40)
     self.id_another_entryythree.grid(row=2,column=2,sticky="w")
     self.id_another_entryythree['state'] = 'disabled'
     self.attach_context_menu(self.id_another_entryythree)

     self.typethree=KBACKEND.fetch_event_types()
     self.typedetailsthree= [row[1] for row in self.typethree]
     Type_nextevent= Label(Next_event, text="Type:")
     Type_nextevent.grid(row=3,column=0,padx=5,pady=5)
     self.Type_nextevent_entryythree= ttk.Combobox(Next_event,values=self.typedetailsthree,width=20)
     self.Type_nextevent_entryythree.grid(row=3,column=1,sticky="w",padx=5,pady=5)
     self.Typenextevent_valuethree= fetch_event_detailsthree.get("Nexteventtype")
     self.Type_nextevent_entryythree.state(['disabled'])
     self.Type_nextevent_entryythree.set(self.Typenextevent_valuethree if self.Typenextevent_valuethree is not None else"")
     self.attach_context_menu(self.Type_nextevent_entryythree)
     
    
     self.Type_another_entryythree= ttk.Entry(Next_event,width=40)
     self.Type_another_entryythree.grid(row=3,column=2,sticky="w")
     self.Type_another_entryythree.state(['disabled'])
     self.attach_context_menu(self.Type_another_entryythree)
       

    #defining functionalities for the icons in the second page 
    def open_icon_windowsecond(self,index):
        if index == 2:
            self.open_next_window()
        elif index == 1:
            self.close_the_second_window()
        elif index==3:
            self.create_event_list() 
    
         
        
    # Define a function to populate Kerride_table with all incidents from the database
    def populate_kerride_table(self,filter_criteria=None):
     
     self.root.Kerride_table.delete(*self.root.Kerride_table.get_children())
    
     all_incidents = KBACKEND.retrieve_all_incidents()

     if filter_criteria is None:
            filter_criteria = self.get_filter_criteria()
     if all_incidents:
        for incident in all_incidents: 
         incident_datetime_s = incident.get("Incident Date")
         # Split the datetime string at the space character to extract the date part
         date_part = incident_datetime_s.date()
         registration = incident.get("Registration")
         Customer=incident.get("Customer")
         I_no=incident.get("Incident No")
         Status=incident.get("Status")
         Cat=incident.get("Category")
         loc=incident.get("Location")
         Char=incident.get("Charge")
         location=incident.get("Locationn")
         Owner= incident.get("Owner")
         Next_Event_Datetime=incident.get("Next_Event_Date")
         
         if Next_Event_Datetime is not None:
          Next_Event_Date = Next_Event_Datetime.date()
          Next_Event_Time = Next_Event_Datetime.time()
         else:
          Next_Event_Date = None  # or a default value
          Next_Event_Time = None  # or a default value
        
         # Filter logic
         if self.passes_filter(incident, filter_criteria):
             self.root.Kerride_table.insert("", "end", values=(incident_datetime_s,Customer,location,registration,I_no,Cat,loc,Char,Status,Owner,Next_Event_Date,Next_Event_Time ))
     else:
      print("No incidents found in the database.")
         
    def get_filter_criteria(self):
        return {
            "Registration": self.Regtext1.get(),
            "Customer": self.text2.get(),
            "Owner": self.text3.get(),
            "Creator": self.text4.get(),
            "Category": self.text5.get(),
            "Location": self.I_location.get(),
            "Charge": self.I_charge.get(),
            "Incident Date": self.text6.get_date() if self.text6.get() else None,
            "Status": self.text7.get(),
            "Closed": self.is_closed.get(),
            "Locations": self.text12.get(),
        }
    def passes_filter(self, incident, filter_criteria):
        if filter_criteria["Registration"] and filter_criteria["Registration"].lower() not in incident.get("Registration", "").lower():
            return False
        if filter_criteria["Customer"] and filter_criteria["Customer"].lower() not in incident.get("Customer", "").lower():
            return False
        if filter_criteria["Owner"] and filter_criteria["Owner"].lower() not in incident.get("Owner", "").lower():
            return False
        if filter_criteria["Creator"] and filter_criteria["Creator"].lower() not in incident.get("Creator", "").lower():
            return False
        if filter_criteria["Category"] and filter_criteria["Category"].lower() not in incident.get("Category", "").lower():
            return False
        if filter_criteria["Location"] and filter_criteria["Location"].lower() not in incident.get("Location", "").lower():
            return False
        if filter_criteria["Charge"] and filter_criteria["Charge"].lower() not in incident.get("Charge", "").lower():
            return False
        if filter_criteria["Incident Date"] and filter_criteria["Incident Date"] != incident.get("Incident Date").date():
            return False
        if filter_criteria["Status"] and filter_criteria["Status"].lower() not in incident.get("Status", "").lower():
            return False
        if filter_criteria["Closed"] and not (incident.get("Status", "").lower() == "x"):
             print("Filtered out due to 'Closed' checkbox")
             return False
        if filter_criteria["Locations"] and filter_criteria["Locations"].lower() not in incident.get("Locationn", "").lower():
            return False
        return True
    
    def filter_kerride_table(self, event=None):
        self.populate_kerride_table()
    
   
    def clear_filters(self):
     # Clear all filter inputs
     self.Regtext1.delete(0, "end")
     self.text2.delete(0, "end")
     self.text3.delete(0, "end")
     self.text4.delete(0, "end")
     self.text5.set('')
     self.I_location.set('')
     self.I_charge.set('')
     self.text6.delete(0, "end")
     self.text7.delete(0, "end")
     self.text12.delete(0, "end")
     self.is_closed.set(0)

     # Repopulate table with all data
     self.populate_kerride_table()
    
    
    def open_next_window(self):
     reg_no = self.text1.get()
     I_number=self.Numberentry.get()
     driver_name = self.Driverentry.get()
     drivertel=self.Driverphone.get()
     created= self.Time.get()
     # Getting the selected date from the DateEntry widget
     selected_date = self.datee.get_date()
    
    # Getting the current time
     current_time = datetime.datetime.now().time()
    
    # Combining selected date and current time into a datetime object
     combined_datetime = datetime.datetime.combine(selected_date, current_time)
    
     contact_method= self.Contact_Method_Entry.get()
     for row in self.contactmeth:
        if row[1] == contact_method:
            contact_methodd = row[0]
            break
     contactname=self.Contact_Name_Entry.get()
     contacttel=self.Contact_Tel_Entry.get()
     contactemail=self.Contact_Email_Entry.get()
     Defect_loc= self.locaentry.get("1.0", tk.END)
     faultdesc=self.Faultentry.get("1.0", tk.END)
     cat_selected = self.CatEntry.get()
     for row in self.Catdetails:
        if row[1] == cat_selected:
            cat_value_to_store = row[0]
            break

     lol=self.LolEntry.get()
     for row in self.Locdetils:
        if row[1] == lol:
            lol_value_to_store = row[0]
            break
     
     charge=self.Chargeentry.get()
     for row in self.Chardetails:
        if row[1]==charge:
           char_value_to_store= row[0]
           break

     status=self.StatussEntry.get()
     for row in self.statrows:
        if row[1]==status:
           stat_value_store= row[0]
           break

     odo= self.Odo.get()
     attendance=self.attendance_var.get()

     Deferred_date = self.datee.get()

     Deferred_time=self.Deferred_Time.get()
    
    # Getting the current time
     datetime_str = f"{Deferred_date} {Deferred_time}"

    # Convert the datetime string to a datetime object
     combined_deferred = datetime.datetime.strptime(datetime_str, "%d/%m/%Y %H:%M")
    
    # Combining selected date and current time into a datetime object
     what3=self.whatwordsentry.get()

     close= self.closed_var.get()

     fleet= self.Fleet_entry.get()

     makemodel=self.text2.get()
     
     custid=self.Customer_Identry.get()
     custname=self.Cust_Name_Entry.get()
     contractno=self.Contract_No_Entry.get()
     locat= self.location_1.get()
     depo= self.Depotentry.get()
     defectno=self.Customer_defno_Entry.get()
     supplier_no= self.nameentry.get()


     KBACKEND.store_registration(reg_no, I_number, driver_name,created,combined_datetime,contact_methodd,contactname,
                                 contacttel,contactemail,drivertel,Defect_loc,faultdesc,cat_value_to_store,lol_value_to_store,
                                 char_value_to_store,stat_value_store,odo,attendance,combined_deferred,what3,close,fleet,custid,contractno,locat,defectno,supplier_no)
    
     last_incident = KBACKEND.retrieve_last_incident()
     print("last_incident:", last_incident)
     

     ## Clear existing data from Kerride_table
     self.root.Kerride_table.delete(*self.root.Kerride_table.get_children())
     
     if last_incident:
        for incidents in last_incident:
         print("Processing incident:", incidents)
        # Retrieve attribute values for each incident
         #print("Last incident data:", last_incident)
         incident_date = incidents.get("Incident Date")
         Customer=incidents.get("Customer")
         registration = incidents.get("Registration")
         I_no=incidents.get("Incident No")
         Status=incidents.get("Status")
         Category=incidents.get("Category")
         loca=incidents.get("Location")
         Charg=incidents.get("Charge")
         Locat= incidents.get("Locationn")
         Owner=incidents.get("Owner")
         Next_Event_DT=incidents.get("Next_Event_DT")
         if Next_Event_DT is not None:
          Next_Event_Date = Next_Event_DT.date()
          Next_Event_Time = Next_Event_DT.time()
         else:
          Next_Event_Date = None  # or a default value
          Next_Event_Time = None
         


        # Insert the incident into Kerride_table
         self.root.Kerride_table.insert("", "end", values=(incident_date, Customer, Locat, registration,I_no,Category,loca,Charg,Status,Owner,Next_Event_Date,Next_Event_Time))
     self.populate_kerride_table()
     
        

    def populate_location_description(self, event=None):
        selected_location = self.location_1.get()
        rows = KBACKEND.fetch_locations_and_descriptions()
        for row in rows:
            if row[0] == selected_location:
                self.location_2.delete(0, tk.END)
                self.location_2.insert(0, row[1])
                break
    def populate_supplier_details(self,event=None):
        selected_supplier= self.Contactentry.get()
        rows=KBACKEND.fetch_supplier_details()
        for row in rows:
           if row[1]==selected_supplier:
              self.nameentry.delete(0,tk.END)
              self.Phoneentry.delete(0,tk.END)
              self.nameentry.insert(0,row[0])
              self.Phoneentry.insert(0,row[2])

    #def populate_eventstree_table(self):
      #self.events_tree.delete(*self.events_tree.get_children())
       #I_no=self.Numberentry.get()
       #KBACKEND.fetch_all_events(I_no)
       #event_details= KBACKEND.fetch_all_events(I_no)
       #if event_details:
          #for event in event_details:
             #Event_created= event.get('Created')
             #event_datetime = datetime.strptime(Event_created, "%Y-%m-%d %H:%M:%S")
             #Created_date = event_datetime.date()

             # Get the time part
             #Created_time = event_datetime.time()
        
             #Notes= event.get('Notes')
             #Last_updated= event.get('Last Updated')
             #last_updated_datetime= datetime.strptime(Last_updated, "%Y-%m-%d %H:%M:%S")
             #Last_updated_date= last_updated_datetime.date()
             #Last_updated_time= last_updated_datetime.time()
             #Follow_up= event.get('Follow up')
             #Follow_up_datetime= datetime.strptime(Follow_up, "%Y-%m-%d %H:%M:%S")
            # Follow_up_date= Follow_up_datetime.date()
             #follow_up_time= Follow_up_datetime.time()

             #self.events_tree.insert("", "end", values=(Created_date,Created_time,"","","",
                #Notes,Last_updated_date,Last_updated_time,"",Follow_up_date,follow_up_time,"",""))
             
    
   
    def populate_next_event_details(self, event=None):
     selected_event_type = self.Event_type_entry.get()
    
     # Find the corresponding details for the selected event type
     for row in self.event_typesinfo:
        if row[1] == selected_event_type:
            next_event_id = row[2]
            if next_event_id is None:  # If there is no next_event_id
                # Set Type_nextevent_entry to the selected event type
                self.Type_nextevent_entry.set(selected_event_type)
                # Set Date_nextevent_Entry to the current date
                current_date = datetime.datetime.now().strftime("%d/%m/%Y")
                self.Date_nextevent_Entry.set_date(current_date)
                # Set Time_nextevent_entry to the current time
                current_time = datetime.datetime.now().strftime("%H:%M")
                self.Time_nextevent_entry.delete(0, 'end')  # Clear previous value
                self.Time_nextevent_entry.insert(0, current_time)
            else:
                # Find the corresponding description for the next_event_id
                for item in self.type:
                    if item[0] == next_event_id:
                        self.Type_nextevent_entry.set(item[1])
                        minutes = item[3]  # Use minutes from item[3]
                        if minutes > 1440:  # If duration exceeds one day
                            # Calculate the number of days and remaining minutes
                            days = minutes // 1440
                            remaining_minutes = minutes % 1440
                            # Calculate the adjusted date
                            next_date = datetime.datetime.now() + datetime.timedelta(days=days)
                            date_str = next_date.strftime("%d/%m/%Y")
                            # Populate Date_nextevent_Entry
                            self.Date_nextevent_Entry.set_date(date_str)
                            # Get the current time
                            current_time_str = self.Time_created_entry.get()
                            current_time = datetime.datetime.strptime(current_time_str, "%H:%M")
                            # Add remaining minutes to current time
                            adjusted_time = current_time + datetime.timedelta(minutes=remaining_minutes)
                        else:
                            # Get the current time
                            current_time_str = self.Time_created_entry.get()
                            current_time = datetime.datetime.strptime(current_time_str, "%H:%M")
                            # Add minutes to current time
                            adjusted_time = current_time + datetime.timedelta(minutes=minutes)
                        # Format adjusted time
                        adjusted_time_str = adjusted_time.strftime("%H:%M")
                        # Populate Time_nextevent_entry
                        self.Time_nextevent_entry.delete(0, 'end')  # Clear previous value
                        self.Time_nextevent_entry.insert(0, adjusted_time_str)
                        break
            break









    


     

    
        
            
    def close_the_second_window(self):
        self.icon1_window.destroy()



#==================================End of Second page except closing the window command================#
    
# Starting the third page which is the Purchase order form 
    def open_Purchase_order(self):
     self.purchase_order= tk.Toplevel(self.root)
     self.purchase_order.title("Maintainence Control")
     self.purchase_order.geometry("800x600")  # Adjust the width and height as needed

     icon_box = tk.Frame(self.purchase_order, relief=tk.RIDGE, borderwidth=3)
     icon_box.pack(side=tk.TOP, padx=8, pady=2, anchor="nw")  # Start from left corner

   
     image_paths = ["icon 18.png", "icon 19.png"]
     for idc, path in enumerate(image_paths, start=1):
         image = Image.open(path)
         image = image.resize((15, 15), Image.BILINEAR)  # Change to Image.LANCZOS if preferred
         photo = ImageTk.PhotoImage(image)
         icon_button = tk.Button(icon_box, image=photo, command=lambda index=idc: self.open_icon_windowthird(index))
         icon_button.image = photo
         icon_button.pack(side=tk.LEFT, padx=5, pady=2)
     
     # Create frames for each page
         self.Maintenance_Control = Frame(self.purchase_order)
         self.History = Frame(self.purchase_order)

    # Function to show main page
     def show_maintainence():
        self.Maintenance_Control.pack(fill="both", expand=True)
        self.History.pack_forget()

    # Function to show events page
     def show_History():
      self.Maintenance_Control.pack_forget()
      self.History.pack(fill="both", expand=True)

     show_maintainence()

      #Creating Buttons Frame for second pagE
     Buttonframe= Frame(self.purchase_order, relief=tk.RIDGE)
     Buttonframe.place(x=0,y=27,width=780,height=40)

    # Create buttons
     maintain_button = tk.Button(Buttonframe, text="Maintenance Control", command=show_maintainence)
     maintain_button.pack(side=tk.LEFT, padx=1, pady=2)

     hist_button = tk.Button(Buttonframe, text="History", command=show_History)
     hist_button.pack(side=tk.LEFT, padx=1, pady=2)
     
     #Defining the maintainence components in the third page 
  
     Maindataframe= Frame(self.Maintenance_Control,bd=3, relief=tk.RIDGE)
     Maindataframe.pack(side=tk.TOP,padx=8,pady=3, anchor='nw')
     Maindataframe.place(x=0,y=29,width=780,height=85)

     #Creating Label and Entry for Reg no 
     Reg_no= Label(Maindataframe,text="Reg_no:")
     Reg_no.grid(row=0,column=0)
     self.Reg_no_entry = Entry(Maindataframe, width=30)
     self.Reg_no_entry.grid(row=0, column=1)
     self.attach_context_menu(self.Reg_no_entry)

     #Creating Label and Entry for Vehicle 
     Vehicle_main= Label(Maindataframe,text= "Vehicle:")
     Vehicle_main.grid(row=0,column=2)
     self.Vehicle_main_entry= Entry(Maindataframe,width=35)
     self.Vehicle_main_entry.grid(row=0,column=3,sticky='w')
     self.attach_context_menu(self.Vehicle_main_entry)

     #Creating Label and Entry for Next Scheduled event
     NextSchevent= Label(Maindataframe,text= "Next sched event:")
     NextSchevent.grid(row=0,column=4)
     self.NextSchevententry= Entry(Maindataframe,width=20)
     self.NextSchevententry.grid(row=0,column=5,sticky='w')
     self.attach_context_menu(self.NextSchevententry)

     #Creating Label and Entry for Reg date
     Reg_Date = Label(Maindataframe, text="Reg Date:")
     Reg_Date.grid(row=1, column=0,padx=5,pady=4)
     self.Reg_Date_Entry= DateEntry(Maindataframe, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     self.Reg_Date_Entry.grid(row=1, column=1,sticky='w')
     self.attach_context_menu(self.Reg_Date_Entry)

     #Creating Label and Entry for RFL 
     RFL = Label(Maindataframe, text="RFL:")
     RFL.grid(row=1, column=2,padx=5,pady=4)
     self.RFL_Entry= DateEntry(Maindataframe, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     self.RFL_Entry.grid(row=1, column=3,sticky='w')
     self.attach_context_menu(self.RFL_Entry)

     #Creating Label and Entry for MOT
     MOT = Label(Maindataframe, text="MOT:")
     MOT.grid(row=1, column=4,padx=5,pady=4)
     self.MOT_entry= DateEntry(Maindataframe, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     self.MOT_entry.grid(row=1, column=5,sticky='w')
     self.attach_context_menu(self.MOT_entry)

     #Creating Label and Entry for Last Serviced
     LastServiced = Label(Maindataframe, text="Last Serviced:")
     LastServiced.grid(row=2, column=0)
     self.LastServicedentry= DateEntry(Maindataframe, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     self.LastServicedentry.grid(row=2, column=1,sticky='w')
     self.attach_context_menu(self.LastServicedentry)

     #Creating Label and Entry for at:
     NextSchevent= Label(Maindataframe,text= "at :")
     NextSchevent.grid(row=2,column=2)
     self.NextSchevententry= Entry(Maindataframe,width=10)
     self.NextSchevententry.grid(row=2,column=3,sticky='w')
     self.attach_context_menu(self.NextSchevententry)

     #Creating a new dataframe below Main dataframe

     Agreementframe= Frame(self.Maintenance_Control,bd=3, relief=tk.RIDGE)
     Agreementframe.pack(side=tk.TOP,padx=8,pady=3, anchor='nw')
     Agreementframe.place(x=0,y=120,width=780,height=40)

     #Create Label and entry for Agreement inside the dataframe
     
     Agreement= Label(Agreementframe,text="Agreement:")
     Agreement.grid(row=0,column=0,padx=5,pady=5)
     self.Agreemententry= Entry(Agreementframe,width=30)
     self.Agreemententry.grid(row=0,column=1,padx=5,pady=5)
     self.attach_context_menu(self.Agreemententry)

     #Create Label and entry for Customer
     Customer= Label(Agreementframe,text="Customer:")
     Customer.grid(row=0,column=2,padx=5,pady=5)
     self.Customerentry= Entry(Agreementframe,width=50)
     self.Customerentry.grid(row=0, column=3, padx=5, pady=5)
     self.attach_context_menu(self.Customerentry)

     #Creating a new dataframe below Agreement 

     self.Approvalframe= Frame(self.Maintenance_Control,bd=3, relief=tk.RIDGE)
     self.Approvalframe.pack(side=tk.TOP,padx=8,pady=3, anchor='nw')
     self.Approvalframe.place(x=0,y=170,width=780,height=180)
     
     #Creating frame for the 3 buttons 
     self.Approval_Issue = Frame(self.Approvalframe)
     self.Invoice_Details = Frame(self.Approvalframe)
     self.Miscc= Frame(self.Approvalframe)

     # Function to show approval page
     def show_Approval():
        self.Approval_Issue.pack(fill="both", expand=True)
        self.Invoice_Details.pack_forget()
        self.Miscc.pack_forget()

    # Function to show approval page
     def show_Invoice_Details():
      self.Maintenance_Control.pack_forget()
      self.Invoice_Details.pack(fill="both", expand=True)
      self.Miscc.pack_forget()
    
    #Function to show Misc Page 
     def show_Miscc():
      self.Maintenance_Control.pack_forget()
      self.Invoice_Details.pack_forget()
      self.Miscc.pack(fill="both",expand=True)
     
     show_Approval()

      #Creating Buttons Frame for second pagE
     Buttonframe= Frame(self.Approvalframe, relief=tk.RIDGE)
     Buttonframe.place(x=0,y=8,width=780,height=30)

    # Create buttons
     Approval_button = tk.Button(Buttonframe, text="Approval Issue", command=show_Approval)
     Approval_button.pack(side=tk.LEFT, padx=1, pady=2)

     Invoice_details_button = tk.Button(Buttonframe, text="Invoice Details", command=show_Invoice_Details)
     Invoice_details_button.pack(side=tk.LEFT, padx=1, pady=2)

     Miscc_button = tk.Button(Buttonframe, text="Misc", command=show_Miscc)
     Miscc_button.pack(side=tk.LEFT, padx=1, pady=2)
     
     #Inserting Label and entries inside the Approval button
     
     #Creating a dataframe inside the approval button
     Repairerdataframe= Frame(self.Approval_Issue,bd=3,relief=tk.RIDGE)
     Repairerdataframe.pack(side=tk.TOP,padx=8,pady=3,anchor='nw')
     Repairerdataframe.place(x=0,y=40,width=765,height=130)
     
     #Creating a label and combobox entry for Repairer 
     Repairernames= ["abcd","shhshs""hhsjjs"]
     Repairer= Label(Repairerdataframe, text="Repairer:")
     Repairer.grid(row=0,column=0,padx=5,pady=5)
     self.Repairerentry= ttk.Combobox(Repairerdataframe,values=Repairernames,width=20)
     self.Repairerentry.grid(row=0,column=1,sticky="w",padx=5,pady=5)
     self.attach_context_menu(self.Repairerentry)

      
     #Creating a label and combobox entry for Account
     Accountnumbers= ["AB5677","MO908""HJ666"]
     Account= Label(Repairerdataframe, text="Account:")
     Account.grid(row=0,column=2,padx=5,pady=5)
     self.Accountentry= ttk.Combobox(Repairerdataframe,values=Accountnumbers,width=20)
     self.Accountentry.grid(row=0,column=3,sticky="w",padx=5,pady=5)
     self.attach_context_menu(self.Accountentry)

     #Creating a Label and Entry for Suplier
     Supplierr= Label(Repairerdataframe, text="Supplier:")
     Supplierr.grid(row=0,column=4,padx=5,pady=4)
     self.Supplierrentry= Entry(Repairerdataframe, width=41)
     self.Supplierrentry.grid(row=0,column=5,sticky="w",padx=5,pady=3)
     self.attach_context_menu(self.Supplierrentry)

     #Creating a Label and Entry for Approval
     Approval= Label(Repairerdataframe,text="Approval:")
     Approval.grid(row=1,column=0,padx=5,pady=5)
     self.Approvalentry= Entry(Repairerdataframe,width= 20)
     self.Approvalentry.grid(row=1,column=1,padx=5,pady=5,sticky="w")
     self.attach_context_menu(self.Approvalentry)

     #Creating a Label and Entry for Issued:
     Issued = Label(Repairerdataframe, text="Issued:")
     Issued.grid(row=1, column=2,padx=5,pady=5)
     self.Issuedentry= DateEntry(Repairerdataframe, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     self.Issuedentry.grid(row=1, column=3,padx=5,pady=5,sticky='w')
     self.attach_context_menu(self.Issuedentry)

     #Creating a Label and Entry for Odometer
     Odometer= Label(Repairerdataframe,text="Odometer:")
     Odometer.grid(row=2,column=0,padx=5,pady=5)
     self.Odometerentry= Entry(Repairerdataframe,width= 20)
     self.Odometerentry.grid(row=2,column=1,padx=5,pady=5,sticky="w")
     self.attach_context_menu(self.Odometerentry)

     #Creating a Label and Entry for Repaired:
     Repaired = Label(Repairerdataframe, text="Repaired:")
     Repaired.grid(row=2, column=2,padx=5,pady=5)
     self.Repairedentry= DateEntry(Repairerdataframe, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     self.Repairedentry.grid(row=2, column=3,padx=5,pady=5,sticky='w')
     self.attach_context_menu(self.Repairedentry)


     #Creating Table below the Approval Dataframe

     Table= Frame(self.Maintenance_Control, bd=3,relief=tk.RIDGE)
     Table.place(x=0,y=350,width=780,height=200)

     self.Table_tree = ttk.Treeview(Table, columns=("Reason", "Qty", "Value", "VAT Value", "Total", "Session", "Repair Description", "Rech Value"),show="headings")
     self.Table_tree.pack(fill="both", expand=True)

     self.Table_tree.heading("Reason", text="Reason")
     self.Table_tree.heading("Qty", text="Qty")
     self.Table_tree.heading("Value", text="Value")
     self.Table_tree.heading("VAT Value", text="VAT Value")
     self.Table_tree.heading("Total",text="Total")
     self.Table_tree.heading("Session", text="Session")
     self.Table_tree.heading("Repair Description", text="Repair Description")
     self.Table_tree.heading("Rech Value", text="Rech Value")
    
     self.Table_tree.column("Reason", width=60)
     self.Table_tree.column("Qty", width=60)
     self.Table_tree.column("Value", width=60)
     self.Table_tree.column("VAT Value", width=60)
     self.Table_tree.column("Total", width=60)
     self.Table_tree.column("Session", width=60)
     self.Table_tree.column("Repair Description", width=200)
     self.Table_tree.column("Rech Value", width=60)

     ##########Incident listing in the front page########################
    ########### This clicks the data with a blue colour ###############
    def change_row_color(self, event):
     # Get the clicked row
     item = self.root.Kerride_table.identify_row(event.y)
     print("Clicked on item:", item)
    
     # Select the clicked row and configure tag for color
     self.root.Kerride_table.selection_set(item)
     print("Selected item:", self.root.Kerride_table.selection())
     self.root.Kerride_table.tag_configure("selected", background="lightblue")
    
     # Set focus to the clicked row
     self.root.Kerride_table.focus(item)
    
     # Print a message to indicate that the function is called
     print("Clicked on a row.")
    
     # Extract the registration number from the clicked row
     registration_number = self.root.Kerride_table.item(item, "values")[3]  # Assuming registration number is the first column
     incident_number= self.root.Kerride_table.item(item, "values")[4]
     # Retrieve incident details based on the registration number
     incident_details = KBACKEND.retrieve_incident_details(registration_number,incident_number)
     additional_details=KBACKEND.fetch_additional_details(registration_number)
     
     if incident_details and additional_details:
        # Open the form window and populate it with incident details
        self.open_icon1_window_with_clicked_row_data(registration_number, incident_details,additional_details)
     else:
        print("No incident details found for the selected registration number.")
     
    ############ After the data is click this opens the incident page for that particular data########
    def open_icon1_window_with_clicked_row_data(self, reg_no, incident_details,additional_details):
     # Create a new window for the form
     self.form_window = tk.Toplevel(self.root)
     self. form_window.title("Incident Detail Form")
     self.form_window.geometry("800x620") 

     #Create a container (Frame) for the icons with a border
     icon_box = tk.Frame(self.form_window, relief=tk.RIDGE, borderwidth=3)
     icon_box.pack(side=tk.TOP, padx=8, pady=2, anchor="nw") 

     # You can add icons below menus using PhotoImage or other methods.
    # For demonstration purposes, let's create 13 small image icons.
     image_paths = ["icon23.png", "icon24.png", "icon25.png", "icon26.png"]
     for idin, path in enumerate(image_paths, start=1):
         image = Image.open(path)
         image = image.resize((15, 15), Image.BILINEAR)  # Change to Image.LANCZOS if preferred
         photo = ImageTk.PhotoImage(image)
         icon_button = tk.Button(icon_box, image=photo, command=lambda index=idin: self.open_incident_window(index))
         icon_button.image = photo
         icon_button.pack(side=tk.LEFT, padx=5, pady=2)
    
    # Create frames for each page
         self.mainn_page = Frame(self.form_window)
         self.eventss_page = Frame(self.form_window)
         self.miscc_page = Frame(self.form_window)

    # Function to show main page
     def show_mainn_page():
        self.mainn_page.pack(fill="both", expand=True)
        self.eventss_page.pack_forget()

    # Function to show events page
     def show_eventss_page():
      self.mainn_page.pack_forget()
      self.eventss_page.pack(fill="both", expand=True)
      self.save_the_incident_details()

    
     show_mainn_page()

      #Creating Buttons Frame for second pagE
     Buttonframe= Frame(self.form_window, relief=tk.RIDGE,)
     Buttonframe.place(x=0,y=27,width=780,height=40)

    # Create buttons
     mainn_button = tk.Button(Buttonframe, text="MAIN", command=show_mainn_page)
     mainn_button.pack(side=tk.LEFT, padx=1, pady=2)

     eventss_button = tk.Button(Buttonframe, text="EVENTS", command=show_eventss_page)
     eventss_button.pack(side=tk.LEFT, padx=1, pady=2)


     # Populate the form with the retrieved data
     self.populate_form(reg_no, incident_details,additional_details)

    def populate_form(self, reg_no, incident_details,additional_details):
     # Populate your form with the retrieved incident details

      # Mainn page components
     #First Data Frame for Vehicle Details
     firstdataframe = LabelFrame(self.mainn_page, bd=3, relief=tk.RIDGE,text="Vehicle Details")
     firstdataframe.pack(side=tk.TOP, padx=8, pady=3, anchor="nw")  # Start from left corner
     firstdataframe.place(x=0, y=29, width=780, height=100) 

     #Registration and Entry for the first data frame
     Reg_no = tk.Label(firstdataframe, text="Registration No:")
     Reg_no.grid(row=0, column=0)
    
     self.reistrationentry = tk.Entry(firstdataframe, width=15)
     self.reistrationentry.insert(0, incident_details.get('Registration', ''))
     self.reistrationentry.grid(row=0, column=1)
     self.attach_context_menu(self.reistrationentry)

      #Creating an Entry for page 2
     self.Make_Mod = Entry(firstdataframe, width=30)
     self.Make_Mod.insert(0,additional_details.get('Make_Mod'))
     self.Make_Mod.grid(row=0, column=2,padx=70)
     self.attach_context_menu(self.Make_Mod)

     lb3 = Label(firstdataframe, text="Driver name:")
     lb3.grid(row=0, column=3)
     self.Driverrentry = Entry(firstdataframe, width=18)
     self.Driverrentry.grid(row=0, column=4)
     self.attach_context_menu(self.Driverrentry)

    # Retrieve the value
     self.Driverrvalue = incident_details.get('Driver_name')

    # Insert the value into the Entry widget
     self.Driverrentry.insert(0, self.Driverrvalue if self.Driverrvalue is not None else "")
     
     
     #Creating a Label and Entry for Fleet No:
     Fleett_No=Label(firstdataframe, text="Fleet No:")
     Fleett_No.grid(row=1, column=0,pady=6)
     self.fleett=Entry(firstdataframe,width=15)
     self.fleett.grid(row=1,column=1)
     self.attach_context_menu(self.fleett)
     self.fleettvalue=additional_details.get('fleet_no')
     self.fleett.insert(0,self.fleettvalue if self.fleettvalue is not None else"")
     

     #Creating a Label and Entry for Vehicle loaded:

     lb3 = Label(firstdataframe, text="Vehicle loaded:")
     lb3.grid(row=2, column=0)
     self.Vehiclee_loaded=Checkbutton(firstdataframe,width=2)
     self.Vehiclee_loaded.grid(row=2,column=1)
     self.attach_context_menu(self.Vehiclee_loaded)

     #Creating another Entry for page 2
     self.empty = Entry(firstdataframe, width=30)
     self.empty.grid(row=1, column=2,padx=80)
     self.attach_context_menu(self.empty)

     #Creating a Label and Entry for Driver Phone:

     lb3 = Label(firstdataframe, text="Phone:")
     lb3.grid(row=1, column=3)
     self.Driverrphone = Entry(firstdataframe, width=18)
     self.Driverrphone.grid(row=1, column=4)
     self.attach_context_menu(self.Driverrphone)
     self.Driverrphonevalue= incident_details.get('Driver_phone')
     self.Driverrphone.insert(0,self.Driverrphonevalue if self.Driverrphonevalue is not None else"")
     
     
     #Second Data Frame for Customer and Company Details 
     Seconddataframe= LabelFrame(self.mainn_page, bd=3, relief=tk.RIDGE,text="Customer/Company Details")
     Seconddataframe.pack(side=tk.TOP, padx=8, pady=3, anchor="nw")  # Start from left corner
     Seconddataframe.place(x=0,y=130,width=780,height=100)

     #Creating Label for ID and entry
     Customer_Id = Label(Seconddataframe, text="Customer_ID:", padx=3, pady=3)
     Customer_Id.grid(row=0, column=0)
     self.Customer_Identryy= Entry(Seconddataframe, width=16)
     self.Customer_Identryy.grid(row=0, column=1)
     self.attach_context_menu(self.Customer_Identryy)
     self.Customer_Identryyvalue=additional_details.get('Customer_No')
     self.Customer_Identryy.insert(0,self.Customer_Identryyvalue if self.Customer_Identryyvalue is not 
                                   None else"")
     

     #Creating Label for Cust_Name and entry
     Cust_Name = Label(Seconddataframe, text="Name:", padx=3, pady=3)
     Cust_Name.grid(row=0, column=2)
     self.Cust_Namee_Entry= Entry(Seconddataframe, width=16)
     self.Cust_Namee_Entry.grid(row=0, column=3)
     self.attach_context_menu(self.Cust_Namee_Entry)
     self.Cust_Namee_Entryvalue= additional_details.get('Customer_Name')
     self.Cust_Namee_Entry.insert(0,self.Cust_Namee_Entryvalue if self.Cust_Namee_Entryvalue is not
                                  None else"")
     
     
     #Creating Label for Contract_No and Entry
     
     Contract_No = Label(Seconddataframe, text="Contract_No:", padx=3, pady=3)
     Contract_No.grid(row=0, column=4)
     self.Contract_No_Entryy= Entry(Seconddataframe, width=16)
     self.Contract_No_Entryy.grid(row=0, column=5)
     self.attach_context_menu(self.Contract_No_Entryy)
     self.Contract_No_Entryyvalue= additional_details.get('Contract_No')
     self.Contract_No_Entryy.insert(0,self.Contract_No_Entryyvalue if self.Contract_No_Entryyvalue is 
                                    not None else"")
     
     
      #Creating Label for Contact_Tel and Entry

     Contact_Tel = Label(Seconddataframe, text="Contact_Tel:", padx=3, pady=3)
     Contact_Tel.grid(row=0, column=6)
     self.Contact_Tel_Entryy= Entry(Seconddataframe, width=16)
     self.Contact_Tel_Entryy.grid(row=0, column=7)
     self.attach_context_menu(self.Contact_Tel_Entryy)
     self.Contact_Tel_Entryyvalue=incident_details.get('Contact_tel')
     self.Contact_Tel_Entryy.insert(0,self.Contact_Tel_Entryyvalue if self.Contact_Tel_Entryyvalue is 
                                    not None else"" )
     

    #Creating Label for Contact_Email and Entry

     Contact_Email = Label(Seconddataframe, text="Contact_Email:", padx=3, pady=3)
     Contact_Email.grid(row=1, column=0)
     self.Contact_Email_Entryy= Entry(Seconddataframe, width=16)
     self.Contact_Email_Entryy.grid(row=1, column=1)
     self.attach_context_menu(self.Contact_Email_Entryy)
     self.Contact_Email_Entryyvalue=incident_details.get('Contact_Email')
     self.Contact_Email_Entryy.insert(0,self.Contact_Email_Entryyvalue if self.Contact_Email_Entryyvalue
                                      is not None else"")
     

     #Creating Label for Contact_Name and Entry

     Contact_Name_Label=Label(Seconddataframe, text="Contact_Name:", padx=3, pady=3)
     Contact_Name_Label.grid(row=1, column=2)
     self.Contact_Name_Entryy= Entry(Seconddataframe, width=16)
     self.Contact_Name_Entryy.grid(row=1, column=3)
     self.attach_context_menu(self.Contact_Name_Entryy)
     self.Contact_Name_Entryyvalue=incident_details.get('Contact_name')
     self.Contact_Name_Entryy.insert(0,self.Contact_Name_Entryyvalue if self.Contact_Name_Entryyvalue is
                                     not None else"")
     

     #Creating Label for Customer_Defect_No and Entry

     Customer_DefNO=Label(Seconddataframe, text="Cust_Def_No:", padx=3, pady=3)
     Customer_DefNO.grid(row=1, column=4)
     self.Customer_defno_Entryy= Entry(Seconddataframe, width=16)
     self.Customer_defno_Entryy.grid(row=1, column=5)
     self.attach_context_menu(self.Customer_defno_Entryy)
     self.Customer_defno_Entryyvalue= incident_details.get('Customer_defect')
     self.Customer_defno_Entryy.insert(0,self.Customer_defno_Entryyvalue if self.Customer_defno_Entryyvalue
                                       is not None else"")


      #Creating Label for Order_No and Entry

     Order_No=Label(Seconddataframe, text="Order No:", padx=3, pady=3)
     Order_No.grid(row=1, column=6)
     self.Order_No_Entryy= Entry(Seconddataframe, width=16)
     self.Order_No_Entryy.grid(row=1, column=7)
     self.attach_context_menu(self.Order_No_Entryy)

     #Creating Label for Contact_Method_ID AND Entry
     self.contactmethd= KBACKEND.fetch_contact_detais()
     self.contactdets=[row[1] for row in self.contactmethd]
     Contact_Method_Id=Label(Seconddataframe,text="Contact_Method_ID",padx=3,pady=3)
     Contact_Method_Id.grid(row=2,column=0)
     self.Contact_Method_Entryy=ttk.Combobox(Seconddataframe,width=14,values=self.contactdets)
     self.Contact_Method_Entryy.grid(row=2,column=1)
     self.attach_context_menu(self.Contact_Method_Entryy)
     self.Contact_Email_Entryyvalue=incident_details.get('Contact_id')
     self.Contact_Method_Entryy.insert(0, self.Contact_Email_Entryyvalue if self.Contact_Email_Entryyvalue
                                       is not None else"")
     

     #Creating Label for Depot
     Depot=Label(Seconddataframe,text="Depot",padx=3,pady=3)
     Depot.grid(row=2,column=2)
     self.Depotentryy=Entry(Seconddataframe,width=16)
     self.Depotentryy.grid(row=2,column=3)
     self.attach_context_menu(self.Depotentryy)
     self.Depotentryyvalue=additional_details.get('Customer_Depot')
     self.Depotentryy.insert(0,self.Depotentryyvalue if self.Depotentryyvalue is not None else"")
     
     
     #Creating a frame for incident details 
      
     ThirdDataframe= LabelFrame(self.mainn_page, bd=3, relief=tk.RIDGE,text="Incident Details")
     ThirdDataframe.pack(side=tk.TOP, padx=8, pady=3, anchor="nw")  # Start from left corner
     ThirdDataframe.place(x=0,y=230,width=780,height=293)

     #Creating a label and entry field for location
     Location= Label(ThirdDataframe, text="Location:")
     Location.grid(row=0, column=0,pady=(0,25),sticky='w')
     self.locaentryy= Text(ThirdDataframe,width=30, height='3',wrap='word')
     self.locaentryy.grid(row=0,column=1,columnspan=2,sticky='w')
     self.attach_context_menu(self.locaentryy)
     self.locaentryyvalue=incident_details.get('Defect_Address')
     self.locaentryy.insert("1.0",self.locaentryyvalue if self.locaentryyvalue is not None else"")
     

     #Creating a label and Entry for Number

     Number= Label(ThirdDataframe,text="Number:")
     Number.grid(row=0,column=3,padx=5)
     self.Numberentryy=Entry(ThirdDataframe,width=15)
     self.Numberentryy.grid(row=0,column=4)
     self.attach_context_menu(self.Numberentryy)
     self.Numberentryyvalue=incident_details.get('Incident No')
     self.Numberentryy.insert(0, self.Numberentryyvalue if self.Numberentryyvalue is not None else"")
     
     
     #Creating Label and Entry for Date
     Date = Label(ThirdDataframe, text="Date", padx=5)
     Date.grid(row=1, column=3,padx=20,pady=4)
     self.dateeentry= DateEntry(ThirdDataframe, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     self.dateeentry.grid(row=1, column=4,sticky='w')
     self.attach_context_menu(self.dateeentry)
     self.dateeentryvalue=incident_details.get('Date')
     self.dateeentry.set_date(self.dateeentryvalue if self.dateeentryvalue is not None else"")
     
     
     #Creating Label and Entry for Time 

     Created_by = Label(ThirdDataframe, text="Created_By", padx=5)
     Created_by.grid(row=2, column=3)
     self.Timee= Entry(ThirdDataframe, width=10)
     self.Timee.grid(row=2, column=4,sticky='w')
     self.attach_context_menu(self.Timee)
     self.timeevalue=incident_details.get('Createdby')
     self.Timee.insert(0,self.timeevalue if self.timeevalue is not None else"")
     


     #Creating Label and Entry for Odometer

     Odo= Label(ThirdDataframe, text="Odometer", padx=5)
     Odo.grid(row=3, column=3)
     self.Odoentry= Entry(ThirdDataframe, width=13)
     self.Odoentry.grid(row=3, column=4,sticky='w')
     self.attach_context_menu(self.Odoentry)
     self.Odoentryvalue=incident_details.get('Odometer')
     self.Odoentry.insert(0,self.Odoentryvalue if self.Odoentryvalue is not None else"")
     

     #Creating Lable and Entry for Location:
     # Define the label
     self.Localabel = tk.Label(ThirdDataframe, text="Location:", padx=5)
     self.Localabel.grid(row=4, column=3)

    # Define locaentry
     # Fetch data from the database using backend function
     rowss = KBACKEND.fetch_locations_and_descriptions()
     self.locations = [row[0] for row in rowss]  # First column values for dropdown
    # Define loca combobox
     self.locationn_1 = ttk.Combobox(ThirdDataframe, values=self.locations, width=15)
     self.locationn_1.grid(row=4, column=4, sticky='w')
     self.attach_context_menu(self.locationn_1)
     self.locationn_1value=additional_details.get('PF_Depot')
     self.locationn_1.insert(0,self.locationn_1value if self.locationn_1value is not None else"")
     #self.populate_location_descriptionn()
     

        # Define loca entry
     self.locationn_2 = tk.Entry(ThirdDataframe, width=15)
     self.locationn_2.grid(row=5, column=4, sticky='w', columnspan=4)
     self.attach_context_menu(self.locationn_2)
     self.locationn_1.bind("<<ComboboxSelected>>", self.populate_location_descriptionn)
     self.populate_location_descriptionn()

     #Creating a Lable and Entry for Type

     self.categorydetails= KBACKEND.fetch_cat_details()
     self.categorydescription= [row[1]for row in self.categorydetails]

     Typee= Label(ThirdDataframe, text="Type:")
     Typee.grid(row=1,column=0,padx=5,pady=6)
     self.CatEntryy= ttk.Combobox(ThirdDataframe, values=self.categorydescription, width=13)
     self.CatEntryy.grid(row=1, column=1, pady=4, sticky='w') 
     self.attach_context_menu(self.CatEntryy)
     self.CatEntryyvalue=incident_details.get('Cat')
     self.CatEntryy.insert(0,self.CatEntryyvalue if self.CatEntryyvalue is not None else"")
     
     self.locationdetails=KBACKEND.fetch_Location_details()
     self.locationdescription= [row[1] for row in self.locationdetails]
     self.LolEntryy=ttk.Combobox(ThirdDataframe,values=self.locationdescription,width=13)
     self.LolEntryy.grid(row=1,column=2,pady=4,sticky='w')
     self.attach_context_menu(self.LolEntryy)
     self.LolEntryyvalue=incident_details.get('Loca')
     self.LolEntryy.insert(0,self.LolEntryyvalue if self.LolEntryyvalue is not None else"")
     
     self.chargedetails=KBACKEND.fetch_charge_details()
     self.Chargedescription= [row[1] for row in self.chargedetails]
     self.Chargeentryy=ttk.Combobox(ThirdDataframe,values=self.Chargedescription,width=13)
     self.Chargeentryy.grid(row=2,column=1,pady=4,sticky='w')
     self.attach_context_menu(self.Chargeentryy)
     self.Chargeentryyvalue=incident_details.get('Charge')
     self.Chargeentryy.insert(0,self.Chargeentryyvalue if self.Chargeentryyvalue is not None else"")
     
     
     #Creating a Label and Entry for Fault Description
     Fault= Label(ThirdDataframe, text="Fault Description:")
     Fault.grid(row=3, column=0,sticky='w')
     self.Faultentryy= Text(ThirdDataframe,width=30, height='3',wrap='word')
     self.Faultentryy.grid(row=3,column=1,sticky='w')
     self.attach_context_menu(self.Faultentryy)
     self.Faultentryyvalue=incident_details['Defectdesc']
     self.Faultentryy.insert("1.0",self.Faultentryyvalue if self.Faultentryyvalue is not None else"")
     
     #Creating a Lable and Entry for Status

     self.rowsss= KBACKEND.fetch_status_details()
     self.Statuss= [row[1] for row in self.rowsss]
     Statuss= Label(ThirdDataframe, text="Status:")
     Statuss.grid(row=4,column=0,padx=2)
     self.StatussEntryy= ttk.Combobox(ThirdDataframe, values=self.Statuss, width=15)
     self.StatussEntryy.grid(row=4, column=1, padx=2, pady=4, sticky='w')
     self.attach_context_menu(self.StatussEntryy)
     self.StatussEntryyvalue= incident_details.get('Status')
     self.StatussEntryy.insert(0,self.StatussEntryyvalue if self.StatussEntryyvalue is not None else"")


     #Creating Label and Entry for closed
     Closedlabel=Label(ThirdDataframe,text="Closed")
     Closedlabel.grid(row=7, column=3)
     self.closedd_var = tk.BooleanVar()
     self.Closedd = tk.Checkbutton(ThirdDataframe, variable=self.closedd_var)
     self.Closedd.grid(row=7,column=4,sticky='w')
     self.Closeddvalue= incident_details.get('Closed',0)

     # Convert the retrieved value to boolean (1 for True, 0 for False)
     self.Closeddvalue = bool(self.Closeddvalue)

     # Set the state of the Checkbutton based on the retrieved value
     self.closedd_var.set(self.Closeddvalue)
     #Creating Label and Entry for Attendance Deferred
     

     Attendance_Deff= Label(ThirdDataframe, text="Attendance_Deferred")
     Attendance_Deff.grid(row=5,column=0)
     self.attendance_vari=tk.BooleanVar()
     self.AttendanceEntryy= ttk.Checkbutton(ThirdDataframe, variable=self.attendance_vari)
     self.AttendanceEntryy.grid(row=5, column=1, sticky='w')
     self.attach_context_menu(self.AttendanceEntryy)
     self.AttendanceEntryvalue= incident_details.get('Attendance',0)
     
     self.AttendanceEntryvalue=bool(self.AttendanceEntryvalue)
     self.attendance_vari.set(self.AttendanceEntryvalue)
     
     Deffered = Label(ThirdDataframe, text='Deferred To')
     Deffered.grid(row=6, column=0, padx=2, sticky='w')
     self.Deferred_Too = DateEntry(ThirdDataframe, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='yyyy/mm/dd')
     self.Deferred_Too.grid(row=6, column=1, padx=2, sticky='w')
     self.attach_context_menu(self.Deferred_Too)
     self.Deferred_Tovalue= incident_details.get('Deferred')
     if self.Deferred_Tovalue is not None:
          self.Deferred_Tovaluedate= self.Deferred_Tovalue.date()
     else:
          self.Deferred_Tovaluedate=None
     self.Deferred_Too.set_date(self.Deferred_Tovaluedate)

     Deff_time=Label(ThirdDataframe,text='Deferred To Time')
     Deff_time.grid(row=7,column=0,padx=2, sticky='w')
     self.Deferred_Timetwo= Entry(ThirdDataframe,width=15)
     self.Deferred_Timetwo.grid(row=7,column=1,sticky='w')
     self.Deferred_Timetwovalue=incident_details.get('Deferred')
     if self.Deferred_Timetwovalue is not None:
         self.Deferred_TimetwoTime= self.Deferred_Timetwovalue.time()
     else:
        self.Deferred_TimetwoTime=None
     self.Deferred_Timetwo.insert(0,self.Deferred_TimetwoTime if self.Deferred_TimetwoTime is not None else"")
     self.attach_context_menu(self.Deferred_Timetwo)


     whatwords = Label(ThirdDataframe, text='Defect_loc_W3W')
     whatwords.grid(row=6, column=3, padx=2, sticky='w')
     self.whatwordsentryy = Entry(ThirdDataframe, width=30)
     self.whatwordsentryy.grid(row=6, column=4, padx=2, sticky='w') 
     self.attach_context_menu(self.whatwordsentryy)
     self.whatwordsentryyvalue= incident_details.get('Whatwords')
     self.whatwordsentryy.insert(0,self.whatwordsentryyvalue if self.whatwordsentryyvalue is not None else"")

     
     #Creating Frame for Supplier details
     Fourthdataframe=LabelFrame(self.mainn_page,bd=3,relief=tk.RIDGE,text="Supplier Details")
     Fourthdataframe.pack(side=tk.TOP,padx=8,pady=3, anchor="nw")
     Fourthdataframe.place(x=0,y=522,width=780,height=60)
     
     #Creating label and Entry for Name:
     supp=KBACKEND.fetch_supplier_details()
     self.supplier = [row[1] for row in supp]
     
     self.supplierno=[row[0] for row in supp]
     Namesup= Label(Fourthdataframe, text="Supplier No:")
     Namesup.grid(row=0,column=0,padx=5)
     self.nameentryy= ttk.Combobox(Fourthdataframe,value=self.supplierno,width=30)
     self.nameentryy.grid(row=0,column=1,padx=5)
     self.Suppliernamevalue= incident_details.get('Supplier_No')
     self.nameentryy.insert(0,self.Suppliernamevalue if self.Suppliernamevalue is not None else"")
     self.attach_context_menu(self.nameentryy)
     #self.nameentryy.bind("<<ComboboxSelected>>", self.populate_supplier_details_two)
     
    
     
      #Creating label and Entry for Contat:
     Contactsup= Label(Fourthdataframe, text="Supplier Name:")
     Contactsup.grid(row=0,column=2,padx=5,pady=5)
     self.Contactentryy= ttk.Combobox(Fourthdataframe,values=self.supplier,width=30)
     self.Contactentryy.grid(row=0,column=3,padx=5,pady=5)
     self.attach_context_menu(self.Contactentryy)
     self.nameentryy.bind("<<ComboboxSelected>>", self.populate_supplier_details_two)
     self.Contactentryy.bind("<<ComboboxSelected>>", self.populate_supplier_detailss)
     
     
     
     

     Phonesup= Label(Fourthdataframe, text="Phone:")
     Phonesup.grid(row=0,column=4,padx=5)
     self.Phoneentryy= ttk.Entry(Fourthdataframe,width=17)
     self.Phoneentryy.grid(row=0,column=5,padx=5)
     self.attach_context_menu(self.Phoneentryy)
     self.nameentryy.bind("<<ComboboxSelected>>", self.populate_supplier_details_two)
     self.populate_supplier_details_two()
     
     
     #Retrieving all the events_information :

     EventsFrame= LabelFrame(self.eventss_page, relief=tk.RIDGE,text="Events")
     EventsFrame.place(x=0,y=30,width=780,height=500)
    
     
     self.eventss_tree = ttk.Treeview(EventsFrame, columns=("Created", "Time1", "By1", "Event Type", "Event Action", "Notes", "Last Updated", "Time2","By2", "Follow-Up", "Time3","By3", "Action"),show="headings")
     self.eventss_tree.pack(fill="both", expand=True)

     self.eventss_tree.heading("Created", text="Created")
     self.eventss_tree.heading("Time1", text="Time1")
     self.eventss_tree.heading("By1", text="By1")
     self.eventss_tree.heading("Event Type", text="Event Type")
     self.eventss_tree.heading("Event Action", text="Event Action")
     self.eventss_tree.heading("Notes", text="Notes")
     self.eventss_tree.heading("Last Updated", text="Last Updated")
     self.eventss_tree.heading("Time2", text="Time2")
     self.eventss_tree.heading("By2",text="By2")
     self.eventss_tree.heading("Follow-Up", text="Follow-Up")
     self.eventss_tree.heading("Time3", text="Time3")
     self.eventss_tree.heading("By3",text="By3")
     self.eventss_tree.heading("Action", text="Action")

     self.eventss_tree.column("Created", width=90)
     self.eventss_tree.column("Time1", width=70)
     self.eventss_tree.column("By1", width=60)
     self.eventss_tree.column("Event Type", width=80)
     self.eventss_tree.column("Event Action", width=80)
     self.eventss_tree.column("Notes", width=200)
     self.eventss_tree.column("Last Updated", width=90)
     self.eventss_tree.column("Time2", width=70)
     self.eventss_tree.column("By2",width=60)
     self.eventss_tree.column("Follow-Up", width= 70)
     self.eventss_tree.column("Time3",width= 70)
     self.eventss_tree.column("By3",width= 60)
     self.eventss_tree.column("Action",width= 70)
     
     
     #Simulate adding some data to the tree
     self.scrollbarr_y = ttk.Scrollbar(EventsFrame, orient="vertical", command=self.eventss_tree.yview)
     self.scrollbarr_y.pack(side="right", fill="y")
     self.eventss_tree.configure(yscrollcommand=self.scrollbarr_y.set)

     self.scrollbarr_x = ttk.Scrollbar(EventsFrame, orient="horizontal", command=self.eventss_tree.xview)
     self.scrollbarr_x.pack(side="bottom", fill="x")
     self.eventss_tree.configure(xscrollcommand=self.scrollbarr_x.set)

     self.populate_events_tree()

     self.eventss_tree.bind("<<TreeviewSelect>>", self.on_row_selected)

    def on_row_selected(self, event):
        
        selected_item = self.eventss_tree.selection()
        
        if selected_item:
         # Extract the index of the selected item
         item_index = self.eventss_tree.index(selected_item[0])

         # Event number is the index + 1 (since event numbers start from 1)
         event_no = item_index + 1

         # Get the incident number from the entry
         incident_no=self.Numberentryy.get()

         fetch_event_details= KBACKEND.fetch_data_for_event(incident_no,event_no)

         self.open_eventspage_with_clickedrow(fetch_event_details)
    def open_eventspage_with_clickedrow(self,fetch_event_details):
     
     self.event_window= tk.Toplevel(self.root)
     self.event_window.title("Event Detail Form")
     self.event_window.geometry("800x600") 

     Incident_Eventt= Frame(self.event_window, bd=3, relief=tk.RIDGE)
     Incident_Eventt.pack(side=tk.TOP, padx=8, pady=3, anchor="nw")  # Start from left corner
     Incident_Eventt.place(x=0,y=30,width=600,height=100)

     self.eventsinfo= KBACKEND.fetch_event_types()
     self.eventtypesinformation= [row[1] for row in self.eventsinfo]
     Event_type= Label(Incident_Eventt, text="Event type:")
     Event_type.grid(row=0,column=0,padx=5,pady=5)
     self.Event_type_entryy= ttk.Combobox(Incident_Eventt,values=self.eventtypesinformation,width=20)
     self.Event_type_entryy.grid(row=0,column=1,sticky="w",padx=5,pady=5)
     self.Event_type_value= fetch_event_details.get("Event_Type")
     self.Event_type_entryy.set(self.Event_type_value if self.Event_type_value is not None else"")
     self.Event_type_entryy.state(['disabled'])
     self.attach_context_menu(self.Event_type_entryy)

     self.Event_another_entryy= Entry(Incident_Eventt,width=50,state='disabled')
     self.Event_another_entryy.grid(row=0,column=2,sticky="w")
     self.attach_context_menu(self.Event_another_entryy)

     
     Action_required= Label(Incident_Eventt, text="Created By")
     Action_required.grid(row=1,column=0,padx=5,pady=5)
     self.Action_required_entryy= ttk.Entry(Incident_Eventt,width=30)
     self.Action_required_entryy.grid(row=1,column=1,sticky="w",padx=5,pady=5)
     self.Action_required_entryyvalue=fetch_event_details.get("Createdby")
     self.Action_required_entryy.insert(0,self.Action_required_entryyvalue if self.Action_required_entryyvalue
                                        is not None else"")
     self.Action_required_entryy.state(['disabled'])
     self.attach_context_menu(self.Action_required_entryy)
     
     Owner= Label(Incident_Eventt, text="Owner")
     Owner.grid(row=2,column=0,padx=5,pady=5)
     self.Owner_entryy= ttk.Entry(Incident_Eventt,width=30)
     self.Owner_entryy.grid(row=2,column=1,sticky="w",padx=5,pady=5)
     self.Ownerentryyvalue= fetch_event_details.get("Owner")
     self.Owner_entryy.insert(0,self.Ownerentryyvalue if self.Ownerentryyvalue is not None else"")
     self.Owner_entryy.state(['disabled'])
     self.attach_context_menu(self.Owner_entryy)

     Created= LabelFrame(self.event_window,bd=3, relief=tk.RIDGE,text="Created")
     Created.pack(side=tk.TOP, padx=8, pady=3, anchor="w")
     Created.place(x=610,y=30,width=180,height=120)
     #Creating Date, Time and ID INSIDE THE CREATED DATAFRAME
     Date_created = Label(Created, text="Date:")
     Date_created.grid(row=0, column=0,padx=5,pady=4)
     self.Date_created_Entryy= DateEntry(Created, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     self.Date_created_Entryy.grid(row=0, column=1,sticky='w')
     self.Date_created_Entryyvalue= fetch_event_details.get("Createddate")
     self.Date_created_date= self.Date_created_Entryyvalue.date()
     self.Date_created_Entryy.set_date(self.Date_created_date if self.Date_created_date is not None else"")
     self.Date_created_Entryy.state(['disabled'])
     self.attach_context_menu(self.Date_created_Entryy)
     #Time
     Time_created= Label(Created,text="Time:")
     Time_created.grid(row=1,column=0)
     self.Time_created_entryy= ttk.Entry(Created,width=9)
     self.Time_created_entryy.grid(row=1,column=1,sticky="w")
     self.Time_created_entryyvalue= fetch_event_details.get("Createddate")
     self.Time_created_time=self.Time_created_entryyvalue.time()
     self.Time_created_entryy.insert(0,self.Time_created_time if self.Time_created_time is not None else"")
     self.Time_created_entryy.state(['disabled'])
     self.attach_context_menu(self.Time_created_entryy)
     #id
     ID= Label(Created,text="ID:")
     ID.grid(row=2,column=0)
     self.ID_entryy= ttk.Entry(Created,width=15)
     self.ID_entryy.grid(row=2,column=1,sticky="w")
     self.ID_entryy['state'] = 'disabled'
     self.attach_context_menu(self.ID_entryy)


     Event_text=Frame(self.event_window,bd=3,relief=tk.RIDGE)
     Event_text.pack(side=tk.TOP, padx=8, pady=3, anchor="w")
     Event_text.place(x=0,y=130,width=600,height=200)
     #Creating a label and entry field for Event text inside Event text frame 
     Event_details= Label(Event_text, text="Event_text:")
     Event_details.grid(row=0, column=0,sticky='w')
     self.Event_details_entryy= tk.Text(Event_text,width=50, height='10',wrap='word')
     self.Event_details_entryy.grid(row=0,column=1,sticky='w',padx=5,pady=5)
     self.Event_detailsvalue= fetch_event_details.get("Eventtext")
     self.Event_details_entryy.insert("1.0",self.Event_detailsvalue if self.Event_detailsvalue is not None else"")
     self.Event_details_entryy['state'] = 'disabled'
     self.attach_context_menu(self.Event_details_entryy)

     

     


     Next_event= LabelFrame(self.event_window,bd=3,relief=tk.RIDGE,text="Next Event")
     Next_event.pack(side=tk.TOP, padx=8,pady=3,anchor="w")
     Next_event.place(x=40, y=330, width=500,height= 180)
     #Creating Date, Time and ID,Type INSIDE THE Next Event Dataframe
     Date_nextevent = Label(Next_event, text="Date:")
     Date_nextevent.grid(row=0, column=0,padx=5,pady=4)
     self.Date_nextevent_Entryy= DateEntry(Next_event, width=10, background='darkblue', foreground='white', borderwidth=2, date_pattern='yyyy/mm/dd')
     self.Date_nextevent_Entryy.grid(row=0, column=1,sticky='w')
     self.Date_nextevent_Entryyvalue=fetch_event_details.get("Nexteventdate")
     self.Date_nextevent_date= self.Date_nextevent_Entryyvalue.date()
     print(self.Date_nextevent_date)
     self.Date_nextevent_Entryy.set_date(self.Date_nextevent_date if self.Date_nextevent_date is not None else"")
     self.Date_nextevent_Entryy.state(['disabled'])
     self.attach_context_menu(self.Date_nextevent_Entryy)
     #Time
     Time_nextevent= Label(Next_event,text="Time:")
     Time_nextevent.grid(row=1,column=0,padx=5,pady=5)
     self.Time_nextevent_entryy= Entry(Next_event,width=9)
     self.Time_nextevent_entryy.grid(row=1,column=1,sticky="w",padx=5,pady=5)
     self.Time_nextevent_entryyvalue= fetch_event_details.get("Nexteventdate")
     self.Time_nextevent_time= self.Time_nextevent_entryyvalue.time()
     self.Time_nextevent_entryy.insert(0,self.Time_nextevent_time if self.Time_nextevent_time is not None else"")
     self.Time_nextevent_entryy['state'] = 'disabled'
     self.attach_context_menu(self.Time_nextevent_entryy)
     #id
     ids= ["abcd","shhshs""hhsjjs"]
     id_nextevent= Label(Next_event, text="ID:")
     id_nextevent.grid(row=2,column=0,padx=5,pady=5)
     self.id_nextevent_entryy= ttk.Combobox(Next_event,values=ids,width=20)
     self.id_nextevent_entryy.grid(row=2,column=1,sticky="w",padx=5,pady=5)
     self.id_nextevent_entryy['state'] = 'disabled'
     self.attach_context_menu(self.id_nextevent_entryy)
     self.id_another_entryy= Entry(Next_event,width=40)
     self.id_another_entryy.grid(row=2,column=2,sticky="w")
     self.id_another_entryy['state'] = 'disabled'
     self.attach_context_menu(self.id_another_entryy)

     self.type=KBACKEND.fetch_event_types()
     self.typedetails= [row[1] for row in self.type]
     Type_nextevent= Label(Next_event, text="Type:")
     Type_nextevent.grid(row=3,column=0,padx=5,pady=5)
     self.Type_nextevent_entryy= ttk.Combobox(Next_event,values=self.typedetails,width=20)
     self.Type_nextevent_entryy.grid(row=3,column=1,sticky="w",padx=5,pady=5)
     self.Typenextevent_value= fetch_event_details.get("Nexteventtype")
     self.Type_nextevent_entryy.state(['disabled'])
     self.Type_nextevent_entryy.set(self.Typenextevent_value if self.Type_nextevent_entryy is not None else"")
     self.attach_context_menu(self.Type_nextevent_entryy)
     
    
     self.Type_another_entryy= ttk.Entry(Next_event,width=40)
     self.Type_another_entryy.grid(row=3,column=2,sticky="w")
     self.Type_another_entryy.state(['disabled'])
     self.attach_context_menu(self.Type_another_entryy)
     

    def populate_events_tree(self):
       incident_number=self.Numberentryy.get()
       event_details=KBACKEND.fetch_all_event_details(incident_number)
       self.eventss_tree.delete(*self.eventss_tree.get_children())
       if event_details:
          for events in event_details:
             Event_created= events.get('Created')
             #event_datetime = datetime.strptime(Event_created, "%Y-%m-%d %H:%M:%S")
             Created_date = Event_created.date()

             # Get the time part
             Created_time = Event_created.time()
        
             Notes= events.get('Notes')
             Last_updated= events.get('Last Updated')
             #last_updated_datetime= datetime.strptime(Last_updated, "%Y-%m-%d %H:%M:%S")
             Last_updated_date= Last_updated.date()
             Last_updated_time= Last_updated.time()
             Follow_up= events.get('Follow up')
             #Follow_up_datetime= datetime.strptime(Follow_up, "%Y-%m-%d %H:%M:%S")
             Follow_up_date= Follow_up.date()
             follow_up_time= Follow_up.time()
             Event_Description= events.get('Event_Description')
             Next_Event_Description= events.get('Next_Event_Description')


             self.eventss_tree.insert("", "end", values=(Created_date,Created_time,"",Event_Description,"",
                Notes,Last_updated_date,Last_updated_time,"",Follow_up_date,follow_up_time,"",Next_Event_Description))
        
    

    def populate_location_descriptionn(self, event=None):
        selected_location = self.locationn_1.get()
        rows = KBACKEND.fetch_locations_and_descriptions()
        for row in rows:
            if row[0] == selected_location:
                self.locationn_2.delete(0, tk.END)
                self.locationn_2.insert(0, row[1])
                break
    def populate_supplier_detailss(self,event=None):
        selected_supplier= self.Contactentryy.get()
        rows=KBACKEND.fetch_supplier_details()
        for row in rows:
           if row[1]==selected_supplier:
              self.nameentryy.delete(0,tk.END)
              self.Phoneentryy.delete(0,tk.END)
              self.nameentryy.insert(0,row[0])
              self.Phoneentryy.insert(0,row[2])
    def populate_supplier_details_two(self,event=None):
       selected_supplierno=self.nameentryy.get()
       rows=KBACKEND.fetch_supplier_details()
       for row in rows:
          if row[0]==selected_supplierno:
             self.Contactentryy.delete(0,tk.END)
             self.Phoneentryy.delete(0,tk.END)
             self.Contactentryy.insert(0,row[1])
             self.Phoneentryy.insert(0,row[2])     
             
    def open_incident_window(self,index):
        if index==1:
           self.close_the_incident_window()
        if index==2:
           self.save_the_incident_details()
        if index==3:
           self.open_events_From_mainpage()
    
    import datetime
    ############### Giving Functionalities for icons of the incidentspage navigated from mainpage ########
    def close_the_incident_window(self):
        self.form_window.destroy()
    def save_the_incident_details(self):
     registration_no=self.reistrationentry.get()
     Driver_name= self.Driverrentry.get()
     fleet_no=self.fleett.get()
     Driver_Phone=self.Driverrphone.get()
     Customer_Id=self.Customer_Identryy.get()
     Customer_name= self.Cust_Namee_Entry.get()
     Contract_No=self.Contract_No_Entryy.get()
     Contact_Tel=self.Contact_Tel_Entryy.get()
     Contact_Email=self.Contact_Email_Entryy.get()
     Contact_Name=self.Contact_Name_Entryy.get()
     Customer_defect_no=self.Customer_defno_Entryy.get()
     Order_no=self.Order_No_Entryy.get()
     Contact_method=self.Contact_Method_Entryy.get()
     for row in self.contactmethd:
        if row[1] == Contact_method:
            contact_methodd = row[0]
            break
     Depot=self.Depotentryy.get()
     Defect_Address=self.locaentryy.get("1.0", tk.END)
     Incident_No=self.Numberentryy.get()
     #Date=self.dateeentry.get_date()
     created_by=self.Timee.get()
     Odometer=self.Odoentry.get()
     Depot_no=self.locationn_1.get()

     cat_selected = self.CatEntryy.get()
     for row in self.categorydetails:
        if row[1] == cat_selected:
            cat_value_to_store = row[0]
            break

     lol=self.LolEntryy.get()
     for row in self.locationdetails:
        if row[1] == lol:
            lol_value_to_store = row[0]
            break
     
     charge=self.Chargeentryy.get()
     for row in self.chargedetails:
        if row[1]==charge:
           char_value_to_store= row[0]
           break

     status=self.StatussEntryy.get()
     for row in self.rowsss:
        if row[1]==status:
           stat_value_store= row[0]
           break
     

     Locat=self.LolEntryy.get()
     

     Charge=self.Chargeentryy.get()
    
     Status=self.StatussEntryy.get()

     Faultdesc=self.Faultentryy.get("1.0", tk.END)
     
     Closed=self.closedd_var.get()
     Attendance_def= self.attendance_vari.get()
     Deferred_to=self.Deferred_Too.get()

     Deferred_time=self.Deferred_Timetwo.get()
    
    # Getting the current time
     datetime_str = f"{Deferred_to} {Deferred_time}"

    # Convert the datetime string to a datetime object
     combined_deferred = datetime.datetime.strptime(datetime_str, "%Y/%m/%d %H:%M:%S")
     whatwords=self.whatwordsentryy.get()
     SupplierNo=self.nameentryy.get()

     KBACKEND.update_incident_Details(Driver_name,fleet_no,Driver_Phone,Customer_Id,Contract_No,
                                      Contact_Tel,Contact_Email,Contact_Name,Customer_defect_no,
                                      contact_methodd,Defect_Address,Incident_No,created_by,Odometer,
                                      Depot_no,cat_value_to_store,lol_value_to_store,char_value_to_store,Faultdesc,stat_value_store,Closed,Attendance_def,
                                      combined_deferred,whatwords,registration_no,SupplierNo)
     
     last_updated_incident= KBACKEND.retrieve_updated_incieve(Incident_No)

      ## Clear existing data from Kerride_table
     self.root.Kerride_table.delete(*self.root.Kerride_table.get_children())

     if last_updated_incident:
        for incidents in last_updated_incident:
        # Retrieve attribute values for each incident
         incident_date = incidents.get("Incident Date")
         Customer=incidents.get("Customer")
         registration = incidents.get("Registration")
         I_no=incidents.get("Incident No")
         Status=incidents.get("Status")
         Category=incidents.get("Category")
         loca=incidents.get("Location")
         Charg=incidents.get("Charge")
         Locat= incidents.get("Locationn")
         Owner=incidents.get("Owner")
         Next_Event_DT=incidents.get("Next_Event_DT")
         if Next_Event_DT is not None:
          Next_Event_Date = Next_Event_DT.date()
          Next_Event_Time = Next_Event_DT.time()
         else:
          Next_Event_Date = None  # or a default value
          Next_Event_Time = None
         # Insert the incident into Kerride_table
         self.root.Kerride_table.insert("", "end", values=(incident_date, Customer, Locat, registration,I_no,Category,loca,Charg,Status,Owner,Next_Event_Date,Next_Event_Time))
     self.populate_kerride_table()




    
    def open_events_From_mainpage(self):
     
     self.events_window= tk.Toplevel(self.root)
     self.events_window.title("Event Detail Form")
     self.events_window.geometry("800x600")
       #defining functionalities for icons in the event details page 
     icon_box = tk.Frame(self.events_window, relief=tk.RIDGE, borderwidth=3)
     icon_box.pack(side=tk.TOP, padx=8, pady=2, anchor="nw")  # Start from left corner

    # You can add icons below menus using PhotoImage or other methods.
    # For demonstration purposes, let's create 13 small image icons.
     images = ["icon27.png", "icon28.png"]
     for ideve, path in enumerate(images, start=1):
         image = Image.open(path)
         image = image.resize((15, 15), Image.BILINEAR)  # Change to Image.LANCZOS if preferred
         photo = ImageTk.PhotoImage(image)
         icon_button = tk.Button(icon_box, image=photo, command=lambda index=ideve: self.event_functionalitytwo(index))
         icon_button.image = photo
         icon_button.pack(side=tk.LEFT, padx=5, pady=2)
    
     Incident_Eventtwo= Frame(self.events_window, bd=3, relief=tk.RIDGE)
     Incident_Eventtwo.pack(side=tk.TOP, padx=8, pady=3, anchor="nw")  # Start from left corner
     Incident_Eventtwo.place(x=0,y=30,width=600,height=100)
     
     #Creating Label and Entry for Event Type, Action required inside Incident Event frame
     self.event_typesinfotwo= KBACKEND.fetch_event_types()
     self.eventtypedetailstwo= [row[1] for row in self.event_typesinfotwo]
     Event_type= Label(Incident_Eventtwo, text="Event type:")
     Event_type.grid(row=0,column=0,padx=5,pady=5)
     self.Event_type_entrytwo= ttk.Combobox(Incident_Eventtwo,values=self.eventtypedetailstwo,width=20)
     self.Event_type_entrytwo.grid(row=0,column=1,sticky="w",padx=5,pady=5)
     self.attach_context_menu(self.Event_type_entrytwo)
     self.Event_another_entrytwo= Entry(Incident_Eventtwo,width=50)
     self.Event_another_entrytwo.grid(row=0,column=2,sticky="w")
     self.attach_context_menu(self.Event_another_entrytwo)

     current_user=getuser()
     Action_required= Label(Incident_Eventtwo, text="Created By")
     Action_required.grid(row=1,column=0,padx=5,pady=5)
     self.Action_required_entrytwo= ttk.Entry(Incident_Eventtwo,width=30)
     self.Action_required_entrytwo.grid(row=1,column=1,sticky="w",padx=5,pady=5)
     self.Action_required_entrytwo.insert(0,current_user)
     self.attach_context_menu(self.Action_required_entrytwo)
     
     Owner= Label(Incident_Eventtwo, text="Owner")
     Owner.grid(row=2,column=0,padx=5,pady=5)
     self.Owner_entrytwo= Entry(Incident_Eventtwo,width=30)
     self.Owner_entrytwo.grid(row=2,column=1,sticky="w",padx=5,pady=5)
     self.Owner_entrytwo.insert(0,current_user)
     self.attach_context_menu(self.Owner_entrytwo)

     Createdtwo= LabelFrame(self.events_window,bd=3, relief=tk.RIDGE,text="Created")
     Createdtwo.pack(side=tk.TOP, padx=8, pady=3, anchor="w")
     Createdtwo.place(x=610,y=30,width=180,height=120)
     #Creating Date, Time and ID INSIDE THE CREATED DATAFRAME
     Date_created = Label(Createdtwo, text="Date:")
     Date_created.grid(row=0, column=0,padx=5,pady=4)
     self.Date_created_Entrytwo= DateEntry(Createdtwo, width=12, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     self.Date_created_Entrytwo.grid(row=0, column=1,sticky='w')
     self.attach_context_menu(self.Date_created_Entrytwo)
     #Time
     Time_created= Label(Createdtwo,text="Time:")
     Time_created.grid(row=1,column=0)
     self.Time_created_entrytwo= Entry(Createdtwo,width=9)
     current_time = datetime.datetime.now().strftime("%H:%M")
     self.Time_created_entrytwo.grid(row=1,column=1,sticky="w")
     self.Time_created_entrytwo.insert(0, current_time)
     self.attach_context_menu(self.Time_created_entrytwo)
     #id
     ID= Label(Createdtwo,text="ID:")
     ID.grid(row=2,column=0)
     self.ID_entrytwo= Entry(Createdtwo,width=15)
     self.ID_entrytwo.grid(row=2,column=1,sticky="w")
     self.attach_context_menu(self.ID_entrytwo)


     Event_text=Frame(self.events_window,bd=3,relief=tk.RIDGE)
     Event_text.pack(side=tk.TOP, padx=8, pady=3, anchor="w")
     Event_text.place(x=0,y=130,width=600,height=200)
     #Creating a label and entry field for Event text inside Event text frame 
     Event_details= Label(Event_text, text="Event_text:")
     Event_details.grid(row=0, column=0,sticky='w')
     self.Event_details_entrytwo= Text(Event_text,width=50, height='10',wrap='word')
     self.Event_details_entrytwo.grid(row=0,column=1,sticky='w',padx=5,pady=5)
     self.attach_context_menu(self.Event_details_entrytwo)



     


     Next_event= LabelFrame(self.events_window,bd=3,relief=tk.RIDGE,text="Next Event")
     Next_event.pack(side=tk.TOP, padx=8,pady=3,anchor="w")
     Next_event.place(x=40, y=330, width=500,height= 180)
     #Creating Date, Time and ID,Type INSIDE THE Next Event Dataframe
     Date_nextevent = Label(Next_event, text="Date:")
     Date_nextevent.grid(row=0, column=0,padx=5,pady=4)
     self.Date_nextevent_Entrytwo= DateEntry(Next_event, width=12, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy')
     self.Date_nextevent_Entrytwo.grid(row=0, column=1,sticky='w')
     self.attach_context_menu(self.Date_nextevent_Entrytwo)
     #Time
     Time_nextevent= Label(Next_event,text="Time:")
     Time_nextevent.grid(row=1,column=0,padx=5,pady=5)
     self.Time_nextevent_entrytwo= Entry(Next_event,width=9)
     self.Time_nextevent_entrytwo.grid(row=1,column=1,sticky="w",padx=5,pady=5)
     self.attach_context_menu(self.Time_nextevent_entrytwo)
     #id
     ids= ["abcd","shhshs""hhsjjs"]
     id_nextevent= Label(Next_event, text="ID:")
     id_nextevent.grid(row=2,column=0,padx=5,pady=5)
     self.id_nextevent_entrytwo= ttk.Combobox(Next_event,values=ids,width=20)
     self.id_nextevent_entrytwo.grid(row=2,column=1,sticky="w",padx=5,pady=5)
     self.attach_context_menu(self.id_nextevent_entrytwo)
     self.id_another_entrytwo= Entry(Next_event,width=40)
     self.id_another_entrytwo.grid(row=2,column=2,sticky="w")
     self.attach_context_menu(self.id_another_entrytwo)

     self.typetwo=KBACKEND.fetch_event_types()
     self.typedetailstwo= [row[1] for row in self.typetwo]
     Type_nextevent= Label(Next_event, text="Type:")
     Type_nextevent.grid(row=3,column=0,padx=5,pady=5)
     self.Type_nextevent_entrytwo= ttk.Combobox(Next_event,values=self.typedetailstwo,width=20)
     self.Type_nextevent_entrytwo.grid(row=3,column=1,sticky="w",padx=5,pady=5)
     self.attach_context_menu(self.Type_nextevent_entrytwo)
     self.Event_type_entrytwo.bind("<<ComboboxSelected>>", self.populate_next_event_detailstwo)
     self.populate_next_event_detailstwo()
     self.Type_another_entrytwo= Entry(Next_event,width=40)
     self.Type_another_entrytwo.grid(row=3,column=2,sticky="w")
     self.attach_context_menu(self.Type_another_entrytwo)

    def populate_next_event_detailstwo(self, event=None):
     selected_event_type = self.Event_type_entrytwo.get()
    
     # Find the corresponding details for the selected event type
     for row in self.event_typesinfotwo:
        if row[1] == selected_event_type:
            next_event_id = row[2]
            if next_event_id is None:  # If there is no next_event_id
                # Set Type_nextevent_entry to the selected event type
                self.Type_nextevent_entrytwo.set(selected_event_type)
                # Set Date_nextevent_Entry to the current date
                current_date = datetime.datetime.now().strftime("%d/%m/%Y")
                self.Date_nextevent_Entrytwo.set_date(current_date)
                # Set Time_nextevent_entry to the current time
                current_time = datetime.datetime.now().strftime("%H:%M")
                self.Time_nextevent_entrytwo.delete(0, 'end')  # Clear previous value
                self.Time_nextevent_entrytwo.insert(0, current_time)
            else:
                # Find the corresponding description for the next_event_id
                for item in self.typetwo:
                    if item[0] == next_event_id:
                        self.Type_nextevent_entrytwo.set(item[1])
                        minutes = item[3]  # Use minutes from item[3]
                        if minutes > 1440:  # If duration exceeds one day
                            # Calculate the number of days and remaining minutes
                            days = minutes // 1440
                            remaining_minutes = minutes % 1440
                            # Calculate the adjusted date
                            next_date = datetime.datetime.now() + datetime.timedelta(days=days)
                            date_str = next_date.strftime("%d/%m/%Y")
                            # Populate Date_nextevent_Entry
                            self.Date_nextevent_Entrytwo.set_date(date_str)
                            # Get the current time
                            current_time_str = self.Time_created_entrytwo.get()
                            current_time = datetime.datetime.strptime(current_time_str, "%H:%M")
                            # Add remaining minutes to current time
                            adjusted_time = current_time + datetime.timedelta(minutes=remaining_minutes)
                        else:
                            # Get the current time
                            current_time_str = self.Time_created_entrytwo.get()
                            current_time = datetime.datetime.strptime(current_time_str, "%H:%M")
                            # Add minutes to current time
                            adjusted_time = current_time + datetime.timedelta(minutes=minutes)
                        # Format adjusted time
                        adjusted_time_str = adjusted_time.strftime("%H:%M")
                        # Populate Time_nextevent_entry
                        self.Time_nextevent_entrytwo.delete(0, 'end')  # Clear previous value
                        self.Time_nextevent_entrytwo.insert(0, adjusted_time_str)
                        break
            break

    def event_functionalitytwo(self,index):
       if index==1:
          self.exit_the_events()
       elif index==2:
          self.add_the_events_toinci()
    
    def exit_the_events(self):
       self.events_window.destroy()
    def add_the_events_toinci(self):
     i_number=self.Numberentryy.get()
     KBACKEND.generate_event_numbertwo(i_number)

     date_str = self.Date_created_Entrytwo.get()  # Get date as string
     time_str = self.Time_created_entrytwo.get()  # Get time as string

     # Combine date and time strings into a single datetime string
     datetime_str = f"{date_str} {time_str}"

     # Convert the datetime string to a datetime object
     datetime_obj = datetime.datetime.strptime(datetime_str, "%d/%m/%Y %H:%M")

     First_event=self.Event_type_entrytwo.get()
     for row in self.event_typesinfotwo:    
        if row[1] == First_event:
            First_event_tostore = row[0]
            break
         
     Event_text=self.Event_details_entrytwo.get("1.0", tk.END)
     second_event= self.Type_nextevent_entrytwo.get()
     for row in self.typetwo:    
         if row[1] == second_event:
            Second_event_tostore = row[0]
            break
     datee_str= self.Date_nextevent_Entrytwo.get()
     timee_str=self.Time_nextevent_entrytwo.get()
        # Combine date and time strings into a single datetime string
     datetime_strr = f"{datee_str} {timee_str}"
     # Convert the datetime string to a datetime object
     datetime_objj = datetime.datetime.strptime(datetime_strr, "%d/%m/%Y %H:%M")
     Created_by= self.Action_required_entrytwo.get()
     Owner=self.Owner_entrytwo.get()

     KBACKEND.insert_more_events(i_number,datetime_obj,First_event_tostore,Event_text
                                     ,Second_event_tostore,datetime_objj,Created_by,Owner)
     
     last_updated_event= KBACKEND.retrieve_updated_event(i_number)

      ## Clear existing data from Kerride_table
     self.root.Kerride_table.delete(*self.root.Kerride_table.get_children())

     if last_updated_event:
        for incidents in last_updated_event:
        # Retrieve attribute values for each incident
         incident_date = incidents.get("Incident Date")
         Customer=incidents.get("Customer")
         registration = incidents.get("Registration")
         I_no=incidents.get("Incident No")
         Status=incidents.get("Status")
         Category=incidents.get("Category")
         loca=incidents.get("Location")
         Charg=incidents.get("Charge")
         Locat= incidents.get("Locationn")
         Owner=incidents.get("Owner")
         Next_Event_DT=incidents.get("Next_Event_DT")
         if Next_Event_DT is not None:
          Next_Event_Date = Next_Event_DT.date()
          Next_Event_Time = Next_Event_DT.time()
         else:
          Next_Event_Date = None  # or a default value
          Next_Event_Time = None
         # Insert the incident into Kerride_table
         self.root.Kerride_table.insert("", "end", values=(incident_date, Customer, Locat, registration,I_no,Category,loca,Charg,Status,Owner,Next_Event_Date,Next_Event_Time))
     self.populate_kerride_table()

     event_details= KBACKEND.fetch_all_eventstwo(i_number)
     self.eventss_tree.delete(*self.eventss_tree.get_children())
        
       
     if event_details:
          for event in event_details:
             Event_created= event.get('Created')
             #event_datetime = datetime.strptime(Event_created, "%Y-%m-%d %H:%M:%S")
             Created_date = Event_created.date()

             # Get the time part
             Created_time = Event_created.time()
        
             Notes= event.get('Notes')
             Last_updated= event.get('Last Updated')
             #last_updated_datetime= datetime.strptime(Last_updated, "%Y-%m-%d %H:%M:%S")
             Last_updated_date= Last_updated.date()
             Last_updated_time= Last_updated.time()
             Follow_up= event.get('Follow up')
             #Follow_up_datetime= datetime.strptime(Follow_up, "%Y-%m-%d %H:%M:%S")
             Follow_up_date= Follow_up.date()
             follow_up_time= Follow_up.time()
             Event_Description= event.get('Event_Description')
             Next_Event_Description= event.get('Next_Event_Description')


             self.eventss_tree.insert("", "end", values=(Created_date,Created_time,"",Event_Description,"",
                Notes,Last_updated_date,Last_updated_time,"",Follow_up_date,follow_up_time,"",Next_Event_Description))
        
             self.populate_events_tree()

       
       




     
         



    

    # Giving the functionalities for the icons such as exit and save 
    def open_icon_windowthird(self,index):
        if index == 1:
            self.close_the_third_window()
        elif index == 2:
            self.save_the_details()   
        
    def close_the_third_window(self):
        self.purchase_order.destroy()  
    def save_the_details():
        pass

    

    #This closes the first window and exits the application.
    def close_the_window(self):
        if messagebox.askokcancel("Quit", "Do you want to quit?"):
          self.root.destroy()

    
    #Right click options#
    def copy(self):
        selected_text = self.root.clipboard_get()
        self.root.clipboard_clear()
        self.root.clipboard_append(selected_text)

    def cut(self):
        if self.root.focus_get():
            selected_text = self.root.focus_get().selection_get()
            self.root.focus_get().delete(tk.SEL_FIRST, tk.SEL_LAST)
            self.root.clipboard_clear()
            self.root.clipboard_append(selected_text)

    def paste(self):
        text_to_paste = self.root.clipboard_get()
        self.root.focus_get().insert(tk.INSERT, text_to_paste)

    
    def undo(self):
        if self.undo_stack:
            previous_state = self.undo_stack.pop()
            self.Regtext1.delete(0, tk.END)
            self.Regtext1.insert(0, previous_state)

    def attach_context_menu(self, entry):
        # Create a context menu
        context_menu = tk.Menu(self.root, tearoff=0)
        context_menu.add_command(label="Copy", command=self.copy)
        context_menu.add_command(label="Cut", command=self.cut)
        context_menu.add_command(label="Paste", command=self.paste)
        context_menu.add_command(label="Undo", command=self.undo)
        # Attach context menu to the Entry widget
        def show_context_menu(event):
            context_menu.tk_popup(event.x_root, event.y_root)

        entry.bind("<Button-3>", show_context_menu)
    
        


    

       

        


if __name__ == "__main__":
    root = tk.Tk()
    app = KerridgeReplacement(root)
    root.mainloop()


